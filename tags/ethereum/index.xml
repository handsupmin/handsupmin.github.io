<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Ethereum on HandsLog</title><link>https://handsupmin.github.io/tags/ethereum/</link><description>Recent content in Ethereum on HandsLog</description><generator>Hugo -- 0.146.0</generator><language>ko-kr</language><lastBuildDate>Sun, 21 Sep 2025 13:05:50 +0000</lastBuildDate><atom:link href="https://handsupmin.github.io/tags/ethereum/index.xml" rel="self" type="application/rss+xml"/><item><title>스마트 컨트랙트에서 O(n)을 피하고 O(1)을 지향해야 하는 이유와 실무 대처법</title><link>https://handsupmin.github.io/posts/why-avoid-o-n-in-smart-contracts-aim-for-o1-274b74/</link><pubDate>Sun, 21 Sep 2025 13:05:50 +0000</pubDate><guid>https://handsupmin.github.io/posts/why-avoid-o-n-in-smart-contracts-aim-for-o1-274b74/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>스마트 컨트랙트 구현에서 반복문으로 인한 O(n) 연산은 단순한 성능 문제를 넘어 서비스 가용성에 직결되는 문제를 유발함. 블록 가스 한도와 트랜잭션 가스 비용 구조 때문에 선형 탐색이나 무제한 반복은 결국 특정 상태에서 함수가 더 이상 실행되지 못하는 상황(Exceeds block gas limit)으로 이어질 수 있음. 이유와 개선 방법, 실무에서 고려할 포인트를 정리함.&lt;/p>
&lt;h3 id="문제-정의와-영향">문제 정의와 영향&lt;/h3>
&lt;ul>
&lt;li>상태 검증을 위해 배열을 전수 탐색하는 구현 사례. 예: 사용자 등록 시 users 배열을 처음부터 끝까지 비교하여 중복 체크하는 방식&lt;/li>
&lt;li>문제점 요약: 가스 비용이 가입자 수에 비례해 증가. 블록 가스 한도를 넘기면 해당 함수 호출 불가. 서비스 정상성 저하 및 DoS 위험&lt;/li>
&lt;li>정량적 예시: 개별 비교에 일정 가스가 소모되고 가입자 수가 수만 명대가 되면 단일 트랜잭션으로 처리 불가&lt;/li>
&lt;/ul>
&lt;h3 id="핵심-개념과-대안">핵심 개념과 대안&lt;/h3>
&lt;ol>
&lt;li>매핑(mapping)을 이용한 존재 여부 체크. 키-값 해시 조회 특성으로 조회/삽입/삭제 모두 O(1)&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-solidity" data-lang="solidity">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">mapping&lt;/span>(&lt;span style="color:#66d9ef">address&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>) &lt;span style="color:#66d9ef">public&lt;/span> users;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">register&lt;/span>(&lt;span style="color:#66d9ef">address&lt;/span> user) &lt;span style="color:#66d9ef">public&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> require(&lt;span style="color:#f92672">!&lt;/span>users[user], &lt;span style="color:#e6db74">&amp;#34;already registered&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> users[user] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>장점: 존재 여부 확인 비용 고정. 단점: 전체 열거 불가(온체인 인덱스 조회 불가)&lt;/p></description></item></channel></rss>