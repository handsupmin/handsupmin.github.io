<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Ethereum on HandsLog</title><link>https://handsupmin.github.io/tags/ethereum/</link><description>Recent content in Ethereum on HandsLog</description><generator>Hugo -- 0.146.0</generator><language>ko-kr</language><lastBuildDate>Thu, 09 Oct 2025 13:10:21 +0000</lastBuildDate><atom:link href="https://handsupmin.github.io/tags/ethereum/index.xml" rel="self" type="application/rss+xml"/><item><title>zkSync 생태계 정리, Era와 Elastic Chain으로 보는 ZK-Rollup 확장 전략</title><link>https://handsupmin.github.io/posts/zksync-ecosystem-era-elastic-chain-zk-rollup-84f049/</link><pubDate>Thu, 09 Oct 2025 13:10:21 +0000</pubDate><guid>https://handsupmin.github.io/posts/zksync-ecosystem-era-elastic-chain-zk-rollup-84f049/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>이더리움은 보안과 탈중앙성을 유지하는 대신 처리량과 비용에서 제약이 큼. zkSync는 ZK-Rollup 기반 Layer 2로 이 문제를 해결하는 접근. 본 글은 zkSync의 기술 맥락, Era와 Elastic Chain의 차이, 선택과 운영 시 고려사항까지 한 번에 정리&lt;/p>
&lt;h3 id="핵심-개념">핵심 개념&lt;/h3>
&lt;ul>
&lt;li>ZK-Rollup
&lt;ul>
&lt;li>많은 트랜잭션을 L2에서 묶어 처리한 뒤, 유효성 증명만 L1에 게시하는 구조&lt;/li>
&lt;li>데이터 가용성은 L1에 유지하거나 적어도 L1에서 검증 가능한 형태로 공개&lt;/li>
&lt;li>결과적으로 수수료 절감, 처리량 증가, L1 수준의 보안 상속&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>zkSync
&lt;ul>
&lt;li>ZK-Rollup 기술을 구현한 L2 생태계의 총칭&lt;/li>
&lt;li>개발자 관점에서는 EVM 호환성과 도구 연계를 통해 기존 개발 흐름 재사용 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="동작-원리와-구성">동작 원리와 구성&lt;/h3>
&lt;ul>
&lt;li>트랜잭션 집계
&lt;ul>
&lt;li>사용자의 L2 트랜잭션을 모아 배치로 처리&lt;/li>
&lt;li>상태 전이 결과와 증명을 생성해 L1에 제출&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>유효성 증명
&lt;ul>
&lt;li>SNARK 등 영지식 증명으로 배치가 올바르게 실행되었음을 보장&lt;/li>
&lt;li>L1 컨트랙트는 증명만 검증하므로 가스 비용과 시간 절감&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터 경로
&lt;ul>
&lt;li>입금은 L1에서 L2로 메시지 브릿지를 통해 반영&lt;/li>
&lt;li>출금은 L2 상태가 L1에 최종화된 후 반영, ZK의 빠른 최종성으로 대기 시간 단축&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>보안 상속
&lt;ul>
&lt;li>합의와 데이터 가용성을 L1에 의존, L2 운영자의 악의적 행위가 있어도 증명 검증 단계에서 차단&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="zksync-era-소개">zkSync Era 소개&lt;/h3>
&lt;ul>
&lt;li>목적
&lt;ul>
&lt;li>ZK-Rollup 기반 메인 L2 네트워크 역할&lt;/li>
&lt;li>개발자와 사용자가 바로 활용 가능한 범용 실행 환경 제공&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>특징
&lt;ul>
&lt;li>EVM 호환성 중심 설계, 기존 Solidity 코드와 툴체인 재사용 가능&lt;/li>
&lt;li>낮은 가스비와 빠른 최종성으로 사용자 경험 개선&lt;/li>
&lt;li>L1과의 브릿지 제공, 자산 이동과 메시지 전달 지원&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>사용 사례
&lt;ul>
&lt;li>DeFi, NFT 마켓, 온체인 게임, 소액 결제 등 비용 민감 워크로드&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="zksync-elastic-chain-소개">zkSync Elastic Chain 소개&lt;/h3>
&lt;ul>
&lt;li>배경
&lt;ul>
&lt;li>단일 L2로는 급증하는 수요를 충분히 흡수하기 어려움. 애플리케이션별 요구가 크게 다름&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>개념
&lt;ul>
&lt;li>HyperChains라 부르는 상호 연결된 L2 체인의 네트워크를 지향&lt;/li>
&lt;li>각 체인이 독립적으로 확장과 커스터마이즈 가능, 공통 보안 원칙과 메시징으로 연결&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>특징
&lt;ul>
&lt;li>모듈식 설계. 실행 환경, 수수료 정책, 데이터 가용성 옵션 등 선택 가능&lt;/li>
&lt;li>ZK-Rollup과 체인 간 상호운용을 결합, 대규모 병렬 처리 지향&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>기대 효과
&lt;ul>
&lt;li>멀티체인 앱 구성 용이, 트래픽 분산으로 병목 최소화&lt;/li>
&lt;li>유동성과 사용자 경험을 네트워크 레벨에서 개선&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="era와-elastic-chain-비교-관점">Era와 Elastic Chain 비교 관점&lt;/h3>
&lt;ul>
&lt;li>기술 축
&lt;ul>
&lt;li>Era는 단일 범용 L2 실행 환경&lt;/li>
&lt;li>Elastic Chain은 다중 체인 연결과 모듈성에 초점&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>확장성
&lt;ul>
&lt;li>Era는 높은 처리량을 제공하나 단일 도메인 한계 존재&lt;/li>
&lt;li>Elastic Chain은 체인 수평 확장으로 매우 높은 처리량 추구&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>유연성
&lt;ul>
&lt;li>Era는 범용성 우선, 구성 선택지는 제한적&lt;/li>
&lt;li>Elastic Chain은 애플리케이션 맞춤형 체인 구성 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>마이그레이션 난이도
&lt;ul>
&lt;li>Era는 EVM 호환으로 이식 용이&lt;/li>
&lt;li>Elastic Chain은 설계 선택지가 많아 거버넌스, 상호운용, 유동성 전략 설계 필요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="장점-정리">장점 정리&lt;/h3>
&lt;ul>
&lt;li>이더리움 보안 상속으로 신뢰도 확보&lt;/li>
&lt;li>ZK 기반 최종성으로 빠른 출금과 낮은 지연&lt;/li>
&lt;li>가스 비용 절감, 소액 트랜잭션도 경제성 확보&lt;/li>
&lt;li>EVM 호환으로 기존 개발 생태계 재사용 가능&lt;/li>
&lt;/ul>
&lt;h3 id="한계와-주의-사항">한계와 주의 사항&lt;/h3>
&lt;ul>
&lt;li>복잡성
&lt;ul>
&lt;li>영지식 증명과 롤업 인프라 이해 필요, 디버깅과 관측성 도구 숙련도 요구&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>생태계 성숙도
&lt;ul>
&lt;li>일부 영역은 아직 빠르게 변화 중. 프로토콜 업그레이드와 호환성 변화 리스크 존재&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>운영 중앙화 요소
&lt;ul>
&lt;li>시퀀서 운영과 업그레이드 권한의 탈중앙화 진행 단계 확인 필요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>수수료와 데이터 가용성 옵션
&lt;ul>
&lt;li>온체인 데이터 게시 전략에 따라 비용과 보안이 달라짐. 요구사항 기반 선택 필요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="베스트-프랙티스">베스트 프랙티스&lt;/h3>
&lt;ul>
&lt;li>계약 이식
&lt;ul>
&lt;li>표준 라이브러리와 검증된 패턴 우선 사용, 어셈블리와 저수준 호출 최소화&lt;/li>
&lt;li>체인 간 메시지 지연과 재조합 실패를 고려한 상태머신 설계&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>보안
&lt;ul>
&lt;li>롤업 브릿지 신뢰 가정 명시, 긴급 정지나 업그레이드 권한의 범위 문서화&lt;/li>
&lt;li>감사와 버그바운티 병행, 운영 키 분리와 다중서명 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>관측성
&lt;ul>
&lt;li>L2 노드 지표, 배치 제출 상태, 증명 생성 지연 등 핵심 메트릭 모니터링&lt;/li>
&lt;li>롤업 상태와 브릿지 이벤트를 데이터 파이프라인으로 수집해 이상 탐지 구성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>비용 관리
&lt;ul>
&lt;li>가스 최적화와 배치 타이밍 고려. 이벤트 로그 최소화, 스토리지 쓰기 횟수 절감&lt;/li>
&lt;li>트래픽 스파이크 대비 레이트 리미트와 큐잉 도입&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="간단-선택-가이드">간단 선택 가이드&lt;/h3>
&lt;ul>
&lt;li>단일 체인에서 빠른 이식과 범용 디앱 운영이 필요하면 Era 적합&lt;/li>
&lt;li>대규모 트래픽 분산, 애플리케이션 맞춤 정책, 체인 간 상호운용을 전제로 설계한다면 Elastic Chain 고려&lt;/li>
&lt;li>규제, 거버넌스, 데이터 보존 요구가 명확하다면 모듈식 옵션을 비교 평가 후 결정&lt;/li>
&lt;/ul>
&lt;h3 id="마무리">마무리&lt;/h3>
&lt;p>zkSync는 ZK-Rollup의 보안과 효율을 실사용 수준으로 끌어올린 생태계. Era는 당장 사용할 수 있는 범용 L2 환경을, Elastic Chain은 장기 확장을 위한 네트워크형 설계를 제시. 워크로드 특성과 조직의 리스크 허용도를 바탕으로 보안, 비용, 최종성, 운영 복잡성의 균형점을 잡는 것이 핵심&lt;/p></description></item><item><title>Ramper에서 EIP-712 서명 우회하기: signMessage로 대체</title><link>https://handsupmin.github.io/posts/ramper-eip-712-signmessage-workaround-8bbbd6/</link><pubDate>Wed, 08 Oct 2025 13:10:01 +0000</pubDate><guid>https://handsupmin.github.io/posts/ramper-eip-712-signmessage-workaround-8bbbd6/</guid><description>&lt;h3 id="개념배경">개념/배경&lt;/h3>
&lt;p>일부 환경에서 signTypedData 호출이 막히거나 동작 불안정한 경우 있음
EIP-712는 결국 0x1901 + 도메인 해시 + 구조체 해시를 keccak256 한 다이제스트를 ECDSA로 서명하는 절차임
핵심은 동일 다이제스트를 만들고 프리픽스 없이 서명하는지 확인하는 것임&lt;/p>
&lt;h3 id="접근">접근&lt;/h3>
&lt;p>viem의 hashTypedData로 EIP-712 다이제스트 생성 후 Ramper의 signMessage로 바이트 서명 시도
signMessage가 raw 바이트 서명을 지원해야 personal_sign 접두어가 붙지 않음&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">hashTypedData&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;viem&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">digest&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">hashTypedData&lt;/span>({ &lt;span style="color:#a6e22e">domain&lt;/span>, &lt;span style="color:#a6e22e">types&lt;/span>, &lt;span style="color:#a6e22e">primaryType&lt;/span>, &lt;span style="color:#a6e22e">message&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">sig&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">wallet&lt;/span>.&lt;span style="color:#a6e22e">signMessage&lt;/span>({ &lt;span style="color:#a6e22e">message&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">raw&lt;/span>: &lt;span style="color:#66d9ef">digest&lt;/span> } })
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="주의">주의&lt;/h3>
&lt;p>signMessage가 personal_sign 방식이면 &amp;ldquo;\x19Ethereum Signed Message\n32&amp;rdquo; 접두어가 추가됨
이 경우 검증도 동일 접두어 포함 다이제스트로 진행 필요
스마트 계정은 EIP-1271 규약으로 검증 필요
도메인과 타입 정의의 일관성 유지, 체인 ID와 verifyingContract 변경 시 도메인 해시 불일치 위험 있음&lt;/p></description></item><item><title>롤업 네트워크의 개념과 동작 원리, 옵티미스틱 vs ZK 롤업</title><link>https://handsupmin.github.io/posts/rollup-network-concepts-optimistic-vs-zk-1b9d9c/</link><pubDate>Tue, 07 Oct 2025 13:10:05 +0000</pubDate><guid>https://handsupmin.github.io/posts/rollup-network-concepts-optimistic-vs-zk-1b9d9c/</guid><description>&lt;h3 id="개념배경">개념/배경&lt;/h3>
&lt;p>롤업은 레이어 2에서 다수 트랜잭션을 묶어 처리하고 요약 데이터만 레이어 1에 기록하는 확장 솔루션
레이어 1의 보안을 그대로 이용하면서 처리량 증가와 수수료 절감 달성&lt;/p>
&lt;h3 id="핵심-개념">핵심 개념&lt;/h3>
&lt;p>옵티미스틱 롤업 기본 유효 가정, 이의 제기 기간에 사기 증명 사용, EVM 호환 유리
ZK 롤업 영지식 증명으로 즉시 검증, 빠른 확정성과 출금, 증명 생성 복잡도와 비용 존재&lt;/p>
&lt;h3 id="동작-원리">동작 원리&lt;/h3>
&lt;p>시퀀서가 트랜잭션을 배치로 모아 데이터 가용성 형태로 L1에 게시
검증은 사기 증명 또는 유효성 증명 사용
출금 시간은 옵티미스틱은 챌린지 기간 필요, ZK는 증명 생성 시간에 좌우&lt;/p></description></item><item><title>블록체인 채굴 개념과 동작 원리 PoW 보상 구조 이더리움 전환 사례</title><link>https://handsupmin.github.io/posts/blockchain-mining-explained-pow-rewards-ethereum-merge-1c487a/</link><pubDate>Mon, 06 Oct 2025 13:09:34 +0000</pubDate><guid>https://handsupmin.github.io/posts/blockchain-mining-explained-pow-rewards-ethereum-merge-1c487a/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>채굴은 트랜잭션을 묶어 블록을 만들고 블록체인에 추가하는 행위이자, 네트워크를 공격으로부터 방어하는 핵심 보안 메커니즘임
역사적으로 비트코인과 이더리움은 작업증명 PoW 기반 채굴에 의존해 합의를 유지했음
이더리움은 2022년 9월 The Merge로 지분증명 PoS로 전환하여 블록 생성에 소모되는 에너지를 크게 줄였고, 지금은 채굴 대신 검증자 스테이킹이 사용됨
아래 내용은 채굴이 사용되던 시기의 개념과 동작 원리를 정리한 것으로, PoW 계열 네트워크나 역사적 맥락을 이해하는 데 목적이 있음&lt;/p>
&lt;h3 id="핵심-개념과-정의">핵심 개념과 정의&lt;/h3>
&lt;ul>
&lt;li>블록체인 원장 네트워크 참여자가 공유하는 불변 기록 장부&lt;/li>
&lt;li>트랜잭션 계정 상태를 변화시키는 요청 또는 메시지&lt;/li>
&lt;li>채굴자 PoW 네트워크에서 블록을 제안하고 검증하는 주체&lt;/li>
&lt;li>작업증명 PoW 특정 해시 조건을 만족하는 값을 찾는 계산을 통해 블록의 정당성을 증명하는 합의 규칙&lt;/li>
&lt;li>난이도 difficulty 해시 조건의 엄격함을 조절하는 파라미터, 블록 생성 간격을 목표치로 수렴시키는 역할&lt;/li>
&lt;li>넌스 nonce 해시 목표를 만족하기 위해 반복적으로 변경하는 값&lt;/li>
&lt;li>메모리풀 mempool 블록에 포함되기 전 대기 중인 트랜잭션 집합&lt;/li>
&lt;li>블록 보상 block reward 채굴자가 새 블록을 유효하게 제안했을 때 받는 기본 보상과 수수료 총합&lt;/li>
&lt;/ul>
&lt;h3 id="왜-채굴이-필요한가">왜 채굴이 필요한가&lt;/h3>
&lt;p>탈중앙 시스템에서는 트랜잭션의 순서에 모두가 합의해야 이중지불을 막을 수 있음
예시 Alice가 Bob에게 1 단위를 보내고 Bob이 그 1 단위를 Charlie에게 보낼 때, 순서가 뒤섞이면 Bob이 실제 보유하지 않은 금액을 전송하려 시도하는 문제가 발생함
채굴자는 유효한 트랜잭션을 모아 순서 있게 블록에 넣고, 작업증명으로 해당 블록이 정당함을 증명함
PoW의 설계는 두 가지 속성을 가짐 생성은 어렵지만 검증은 쉬움&lt;/p></description></item><item><title>디파이 DEX 가이드: 유니스왑과 AMM 이해, V1~V3 핵심 변화</title><link>https://handsupmin.github.io/posts/defi-dex-uniswap-amm-v1-v3-guide-4e209f/</link><pubDate>Sun, 05 Oct 2025 13:05:25 +0000</pubDate><guid>https://handsupmin.github.io/posts/defi-dex-uniswap-amm-v1-v3-guide-4e209f/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>유니스왑은 AMM 기반 DEX의 표준을 사실상 정의한 프로토콜로 평가받음
이 글은 유니스왑의 핵심 개념과 AMM 구조, V1→V2→V3로 이어진 변화의 맥락을 정리함
오더북 기반 초창기 DEX의 한계를 짚고, 왜 AMM이 필요한지, 유동성과 슬리피지가 어떤 상관을 가지는지, V3에서 자본 효율성이 어떻게 극적으로 개선되었는지까지 실무 관점으로 설명함&lt;/p>
&lt;h3 id="배경과-맥락">배경과 맥락&lt;/h3>
&lt;p>CEX는 주문 매칭과 자산 보관을 중앙 시스템에서 수행하는 구조
사용자는 체결 속도와 편의성은 얻지만, 온체인 투명성과 자기 보관이라는 블록체인의 장점을 활용하지 못함
초기 DEX는 오더북을 온체인에 올리는 방식을 시도했으나 가스 비용, 확장성, 낮은 유동성으로 사용자 경험이 제한됨
이 한계를 우회한 접근이 AMM 기반 모델이며, 유니스왑은 단순하고 검증 가능한 가격 결정 규칙을 온체인에 구현해 대중화에 성공함&lt;/p></description></item><item><title>Abstract L2 체인 개요와 설계 핵심: ZK Rollup, ZK Stack, 네이티브 계정 추상화, AGW</title><link>https://handsupmin.github.io/posts/abstract-l2-zk-rollup-zk-stack-account-abstraction-agw-dc7ec0/</link><pubDate>Fri, 03 Oct 2025 13:07:57 +0000</pubDate><guid>https://handsupmin.github.io/posts/abstract-l2-zk-rollup-zk-stack-account-abstraction-agw-dc7ec0/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>Abstract는 이더리움 보안을 상속하는 ZK Rollup 기반 L2 체인으로, 고비용·저처리량 한계를 완화하는 확장 층 제공 목표
ZK Stack으로 구축되어 체인 개발과 운영 구성 요소를 모듈화하고, 데이터 가용성은 EIP-4844 블롭을 활용해 비용을 절감하는 방향 추구
핵심 차별점은 네이티브 계정 추상화 기반의 트랜잭션 수명주기와 글로벌 지갑 레이어를 통한 사용자 온보딩 간소화에 있음&lt;/p>
&lt;h3 id="배경과-목적">배경과 목적&lt;/h3>
&lt;p>이더리움 메인넷의 처리량은 대략 초당 수십 건 수준이며, 수수료 변동성도 큼
저가치 대량 트랜잭션을 직접 L1에서 처리하는 것은 비현실적
L2의 목표는 탈중앙성과 보안을 유지하면서 처리량과 비용 효율을 동시에 개선하는 것
ZK Rollup은 유효성 증명을 통해 상태 전이를 압축·검증하여 온체인 데이터 요구량과 확정 시간을 줄이는 확장 경로 제공&lt;/p></description></item><item><title>Viem으로 이더리움 읽기·쓰기 시작하기 가이드</title><link>https://handsupmin.github.io/posts/viem-ethereum-read-write-guide-4a5336/</link><pubDate>Thu, 02 Oct 2025 13:07:56 +0000</pubDate><guid>https://handsupmin.github.io/posts/viem-ethereum-read-write-guide-4a5336/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>Viem은 이더리움 계열 체인과 상호작용하는 경량 Web3 클라이언트 라이브러리임
ethers나 web3.js와 같은 범용 라이브러리와 동일한 범주의 도구지만, 모듈 분리 구조와 타입 안전성, 빌드 사이즈, 성능에서 강점이 있음
프로덕션에서 자주 필요한 읽기와 쓰기 흐름을 중심으로, 설치부터 블록 조회, 컨트랙트 읽기, 컨트랙트 쓰기까지의 필수 개념과 실용 팁 정리&lt;/p>
&lt;h3 id="핵심-개념과-정의">핵심 개념과 정의&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Public Client&lt;/p>
&lt;ul>
&lt;li>퍼블릭 RPC를 통해 체인 데이터 읽기 전용 호출 수행하는 클라이언트&lt;/li>
&lt;li>블록, 트랜잭션, 로그 조회, read-only 컨트랙트 호출 담당&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Wallet Client&lt;/p></description></item><item><title>WETH 이해와 활용 가이드 – ETH를 ERC-20로 포장하는 이유와 동작 원리</title><link>https://handsupmin.github.io/posts/weth-eth-erc20-guide-683552/</link><pubDate>Wed, 01 Oct 2025 13:10:22 +0000</pubDate><guid>https://handsupmin.github.io/posts/weth-eth-erc20-guide-683552/</guid><description>&lt;h3 id="개념배경">개념/배경&lt;/h3>
&lt;p>WETH는 이더리움 네트워크의 기본 자산인 ETH를 ERC-20 표준과 호환되도록 포장한 토큰을 의미함
ETH 자체는 계정 잔고 모델을 따르며 ERC-20 인터페이스를 구현하지 않음
반면 대부분의 디파이 프로토콜과 토큰 간 상호작용은 ERC-20을 전제로 동작함
이 간극을 메우기 위해 1:1 가치로 교환 가능한 WETH가 사용됨&lt;/p>
&lt;p>핵심은 호환성과 일관성임
WETH를 사용하면 ETH를 일반적인 ERC-20 토큰처럼 전송, 승인, 보관, 스왑 등 동일한 방식으로 다룰 수 있음&lt;/p>
&lt;h3 id="핵심-개념과-정의">핵심 개념과 정의&lt;/h3>
&lt;ul>
&lt;li>정의: ETH를 스마트 컨트랙트에 예치하고 동일 수량의 ERC-20 토큰을 발행한 형태의 래핑 자산&lt;/li>
&lt;li>가치 페깅: 1 WETH = 1 ETH를 목표로 하며 언제든 역변환 가능&lt;/li>
&lt;li>표준 호환: ERC-20 인터페이스 준수로 승인, 전송, 수령 등 동작이 통일됨&lt;/li>
&lt;li>커스터디 모델: 컨트랙트가 ETH를 보관하고, 사용자는 WETH를 보유하여 권리를 표현함&lt;/li>
&lt;/ul>
&lt;h3 id="동작-원리">동작 원리&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>래핑 흐름&lt;/p></description></item><item><title>스테이킹 핵심 개념과 이더리움 검증자 32 ETH 요건</title><link>https://handsupmin.github.io/posts/staking-basics-ethereum-validator-32eth-8cc2be/</link><pubDate>Tue, 30 Sep 2025 13:10:16 +0000</pubDate><guid>https://handsupmin.github.io/posts/staking-basics-ethereum-validator-32eth-8cc2be/</guid><description>&lt;h3 id="개념">개념&lt;/h3>
&lt;p>스테이킹은 여러 사용자가 자금을 모아 검증자 노드를 운영하고 보상과 위험을 지분 비율로 공유하는 참여 모델&lt;/p>
&lt;h3 id="동작">동작&lt;/h3>
&lt;p>검증자에는 최소 예치금 필요
이더리움은 32 ETH 요구
풀에 위임하면 노드가 검증을 수행하고 발생 보상을 분배
규정 위반이나 다운타임 발생 시 슬래싱으로 원금 일부 손실 위험&lt;/p>
&lt;h3 id="참고자료">참고자료&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://ethereum.org/en/staking/">https://ethereum.org/en/staking/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://polkadot.network/learn/staking/">https://polkadot.network/learn/staking/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>블록체인이란? 블록체인 개념 총정리</title><link>https://handsupmin.github.io/posts/blockchain-principles-mining-hash-274b74/</link><pubDate>Mon, 22 Sep 2025 13:10:11 +0000</pubDate><guid>https://handsupmin.github.io/posts/blockchain-principles-mining-hash-274b74/</guid><description>&lt;h2 id="개요">개요&lt;/h2>
&lt;p>블록체인은 &lt;strong>중앙 기관 없이&lt;/strong> 참여자들이 거래를 기록·검증·공유하는 &lt;strong>분산 원장&lt;/strong> 기술임
이 글은 블록체인을 &lt;strong>초보자 친화적으로&lt;/strong> 설명하고, &lt;strong>실무 체크리스트&lt;/strong>까지 정리함&lt;/p>
&lt;hr>
&lt;h2 id="큰-그림-시스템-구성">큰 그림: 시스템 구성&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>노드(Node)&lt;/strong>: 블록체인 소프트웨어 실행 주체&lt;/p>
&lt;ul>
&lt;li>&lt;strong>풀노드&lt;/strong>: 모든 블록·트랜잭션 검증·저장&lt;/li>
&lt;li>&lt;strong>라이트 클라이언트&lt;/strong>: 헤더·머클 증명 기반 최소 검증&lt;/li>
&lt;li>(참고) &lt;strong>아카이브 노드&lt;/strong>: 오래된 상태 포함 전체 상태 유지(필수 아님)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>블록(Block)&lt;/strong>: 트랜잭션 묶음 + 메타데이터(블록헤더). 블록들이 선형 체인으로 연결됨&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>합의(Consensus)&lt;/strong>: 어떤 블록이 정식 이력인지 네트워크가 &lt;strong>공동으로&lt;/strong> 결정하는 규칙&lt;/p>
&lt;ul>
&lt;li>PoW: 작업증명(연산 경쟁)&lt;/li>
&lt;li>PoS: 지분증명(검증자·보증금 기반)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="해시hash와-위변조-방지">해시(Hash)와 위·변조 방지&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>해시 함수(SHA-256, Keccak-256 등)&lt;/strong>: 입력을 고정 길이로 압축하는 일방향 함수임&lt;/p></description></item><item><title>스마트 컨트랙트에서 O(n)을 피하고 O(1)을 지향해야 하는 이유와 실무 대처법</title><link>https://handsupmin.github.io/posts/why-avoid-o-n-in-smart-contracts-aim-for-o1-274b74/</link><pubDate>Sun, 21 Sep 2025 13:05:50 +0000</pubDate><guid>https://handsupmin.github.io/posts/why-avoid-o-n-in-smart-contracts-aim-for-o1-274b74/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>스마트 컨트랙트에서 무제한에 가까운 O(n) 반복문은 성능 저하를 넘어 &lt;strong>실행 불가&lt;/strong>로 이어질 수 있음
블록당 가스 한도와 트랜잭션 가스 모델 때문에 선형 탐색이나 전수 루프는 특정 규모에서 &lt;strong>가스 한도 초과&lt;/strong>를 일으켜 서비스 가용성을 떨어뜨림
이 문서는 원인과 개선 패턴, 실무 체크리스트를 정리함&lt;/p>
&lt;hr>
&lt;h3 id="문제-정의와-영향">문제 정의와 영향&lt;/h3>
&lt;ul>
&lt;li>배열 전수 탐색으로 중복 검사나 상태 검증을 수행하는 구현이 흔함
예 users 배열을 처음부터 끝까지 훑어 가입자 중복을 확인하는 방식&lt;/li>
&lt;li>가입자 수에 비례해 가스가 선형 증가하며 어느 시점부터 한 트랜잭션으로 처리 불가&lt;/li>
&lt;li>공격자가 &lt;strong>가스 그리핑&lt;/strong>을 유도하거나 외부 입력으로 루프 길이를 키우면 사실상 &lt;strong>DoS&lt;/strong>가 될 수 있음&lt;/li>
&lt;li>RPC 에러 메시지는 노드별로 다르지만 본질은 가스 예산 초과로 인한 &lt;strong>미포함·리버트&lt;/strong>임&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="핵심-개념과-대안">핵심 개념과 대안&lt;/h3>
&lt;p>&lt;strong>1) 매핑으로 존재 여부 O(1) 검사&lt;/strong>
저장 키 기반 조회가 상수 시간으로 동작해 선형 탐색을 제거함&lt;/p></description></item><item><title>이더리움 PoS(Proof of Stake) 소개</title><link>https://handsupmin.github.io/posts/ethereum-pos-proof-of-stake-274b74/</link><pubDate>Sat, 20 Sep 2025 17:04:48 +0000</pubDate><guid>https://handsupmin.github.io/posts/ethereum-pos-proof-of-stake-274b74/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>이 문서는 이더리움의 PoS 합의 구조와 구성 요소를 정리함
개념 정의에 그치지 않고 &lt;strong>운영 시 주의점&lt;/strong>, &lt;strong>보상·출금 흐름&lt;/strong>, &lt;strong>짧은 체인 재구성(Reorg) 원인과 완화책&lt;/strong>까지 다룸&lt;/p>
&lt;hr>
&lt;h3 id="개념과-배경">개념과 배경&lt;/h3>
&lt;p>PoS는 PoW의 에너지 경쟁을 대체해 &lt;strong>예치된 지분을 바탕으로 검증자를 선정&lt;/strong>하는 합의 메커니즘임
이더리움은 2022년 9월 더 머지 이후 PoS로 전환했고 전력 소비를 크게 줄이며 &lt;strong>검증자 기반 보안 모델&lt;/strong>로 이행함&lt;/p>
&lt;p>주요 속성 요약&lt;/p>
&lt;ul>
&lt;li>에너지 소비 대폭 축소&lt;/li>
&lt;li>스테이킹한 ETH 규모에 비례해 역할 참여 기회가 부여됨&lt;/li>
&lt;li>위반 시 슬래싱과 페널티로 예치금이 감소함&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="계층-분리와-beacon-chain의-역할">계층 분리와 Beacon Chain의 역할&lt;/h3>
&lt;p>이더리움은 &lt;strong>합의 계층(Beacon Chain)&lt;/strong> 과 &lt;strong>실행 계층(Execution Layer)&lt;/strong> 를 분리해 설계함&lt;/p></description></item></channel></rss>