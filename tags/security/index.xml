<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Security on HandsLog</title><link>https://handsupmin.github.io/tags/security/</link><description>Recent content in Security on HandsLog</description><generator>Hugo -- 0.146.0</generator><language>ko-kr</language><lastBuildDate>Mon, 29 Sep 2025 13:10:22 +0000</lastBuildDate><atom:link href="https://handsupmin.github.io/tags/security/index.xml" rel="self" type="application/rss+xml"/><item><title>영지식 증명 ZKP의 개념과 동작 원리, 디지털 서명과의 차이</title><link>https://handsupmin.github.io/posts/zkp-concepts-and-how-it-works-vs-digital-signatures-1338b0/</link><pubDate>Mon, 29 Sep 2025 13:10:22 +0000</pubDate><guid>https://handsupmin.github.io/posts/zkp-concepts-and-how-it-works-vs-digital-signatures-1338b0/</guid><description>&lt;h2 id="개요">개요&lt;/h2>
&lt;p>영지식 증명은 어떤 명제가 참임을 설득하면서도 그 근거가 되는 비밀은 끝까지 숨기는 절차를 말함
블록체인과 프라이버시 보존 컴퓨팅에서 핵심 도구로 자리 잡았고 범용 계산의 유효성을 작은 증명으로 압축해 전달하는 현대 프로토콜의 기초로 쓰임
이 글은 기본 개념과 직관, 수학적 성질, 대화형과 비대화형의 차이, 디지털 서명과의 구분, 이산로그 기반 간단 Σ-프로토콜까지 한 번에 정리함&lt;/p>
&lt;h2 id="목적과-맥락">목적과 맥락&lt;/h2>
&lt;ul>
&lt;li>비밀을 공개하지 않고 유효성만 검증하려는 요구 증가&lt;/li>
&lt;li>퍼블릭 블록체인에서 데이터 비공개 유지와 정합성 보장 필요 확대&lt;/li>
&lt;li>오프체인 연산을 온체인에 작은 증명으로 제출해 확장성과 비용 개선 추구&lt;/li>
&lt;/ul>
&lt;h2 id="핵심-개념과-정의">핵심 개념과 정의&lt;/h2>
&lt;ul>
&lt;li>Prover 비밀을 가진 참여자. 비밀을 공개하지 않고 명제의 참을 설득하려는 주체&lt;/li>
&lt;li>Verifier 검증자. Prover가 비밀을 가진 사실 또는 명제가 참이라는 사실만 확인하려는 주체&lt;/li>
&lt;li>Witness 또는 Secret 명제의 참을 뒷받침하는 비밀 값 또는 비밀 지식&lt;/li>
&lt;li>Statement 공개 가능한 명제 표현. 예 y = g^x mod p에서 x를 알고 있음을 증명&lt;/li>
&lt;li>Challenge 검증자가 제시하는 무작위 도전값. 조작 불가와 예측 불가가 전제&lt;/li>
&lt;li>Transcript 또는 View 대화형 상호작용의 기록. 시뮬레이터가 동일 분포로 재현 가능해야 영지식 성립&lt;/li>
&lt;/ul>
&lt;h2 id="영지식-증명의-세-가지-성질">영지식 증명의 세 가지 성질&lt;/h2>
&lt;ul>
&lt;li>완전성 Completeness 정직한 Prover가 비밀을 가지고 있으면 정직한 Verifier는 높은 확률로 설득됨&lt;/li>
&lt;li>건전성 Soundness 비밀이 없으면 Prover가 속일 확률이 매우 낮음. 도전 공간 확대나 반복으로 속임 확률을 지수적으로 낮춤&lt;/li>
&lt;li>영지식성 Zero-Knowledge Verifier는 명제가 참이라는 사실 외 추가 정보를 얻지 못함. 시뮬레이터가 실제와 구별 불가한 트랜스크립트를 비밀 없이 생성 가능해야 함&lt;/li>
&lt;/ul>
&lt;h2 id="직관적-예시-알리바바-동굴">직관적 예시 알리바바 동굴&lt;/h2>
&lt;ul>
&lt;li>동굴의 두 갈래 A와 B 사이를 가로막는 문이 있고 비밀 주문을 알면 반대편으로 넘어올 수 있음&lt;/li>
&lt;li>검증자는 Prover가 들어간 뒤 무작위로 A 또는 B로 나오라고 요구함&lt;/li>
&lt;li>Prover가 주문을 모르면 자신이 들어간 쪽을 요구받을 때만 성공 가능. 1회 성공 확률 1/2&lt;/li>
&lt;li>k회 독립 반복하면 모두 속일 확률 2^-k로 급감&lt;/li>
&lt;li>검증자는 주문 내용은 모르지만 Prover가 주문을 안다는 사실만 높은 확률로 확신 가능함&lt;/li>
&lt;/ul>
&lt;p>핵심 포인트&lt;/p></description></item><item><title>블록체인 오라클 개념, 유형, 동작 원리</title><link>https://handsupmin.github.io/posts/blockchain-oracle-guide-91a3d2/</link><pubDate>Sat, 27 Sep 2025 13:05:51 +0000</pubDate><guid>https://handsupmin.github.io/posts/blockchain-oracle-guide-91a3d2/</guid><description>&lt;h2 id="개념과-배경">개념과 배경&lt;/h2>
&lt;p>스마트 컨트랙트는 체인 내부 상태만 신뢰하고 외부 네트워크에 직접 접근하지 않음
가격·날씨·게임 결과 같은 외부 데이터를 참조하려면 중간자 역할이 필요함
오라클은 외부 데이터를 온체인으로 들여오거나 온체인 이벤트를 외부 시스템에 전달하는 인터페이스 역할 수행
이 연결이 잘못 설계되면 컨트랙트의 무결성이 오라클 신뢰도에 종속되는 구조적 한계가 발생함&lt;/p>
&lt;h2 id="핵심-개념과-정의">핵심 개념과 정의&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>오라클&lt;/strong>: 블록체인과 외부 세계를 잇는 데이터 브리지 역할&lt;/li>
&lt;li>&lt;strong>인바운드 오라클&lt;/strong>: 외부 데이터를 온체인으로 주입&lt;/li>
&lt;li>&lt;strong>아웃바운드 오라클&lt;/strong>: 온체인 이벤트를 외부 서비스나 장치로 전달&lt;/li>
&lt;li>&lt;strong>중앙화 오라클&lt;/strong>: 단일 주체가 데이터 제공 단일 실패 지점과 조작 리스크 존재&lt;/li>
&lt;li>&lt;strong>탈중앙화 오라클&lt;/strong>: 다수 노드와 다중 소스 집계 신뢰성과 가용성 강화 대신 비용과 복잡도 상승&lt;/li>
&lt;li>&lt;strong>소프트웨어 오라클&lt;/strong>: API 기반 웹 데이터 공급&lt;/li>
&lt;li>&lt;strong>하드웨어 오라클&lt;/strong>: 센서·IoT 장치에서 물리 정보 수집과 증빙 제공&lt;/li>
&lt;li>&lt;strong>오라클 문제&lt;/strong>: 체인 합의는 내부 상태만 보장 외부 진실성은 합의 밖에 있어 신뢰 경계가 오라클로 이동하는 과제 존재&lt;/li>
&lt;/ul>
&lt;h2 id="동작-원리와-구조">동작 원리와 구조&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>요청 응답 패턴&lt;/strong>: 컨트랙트가 요청을 생성하고 오라클 네트워크가 수집·검증 후 결과를 콜백으로 전달&lt;/li>
&lt;li>&lt;strong>퍼블리시 패턴&lt;/strong>: 오라클이 주기적으로 데이터를 온체인에 게시하고 컨슈머는 읽기만 수행&lt;/li>
&lt;li>&lt;strong>집계 방식&lt;/strong>: 다중 소스 수집 후 중앙값 또는 가중 평균 산출 이상치 제거 규칙 포함&lt;/li>
&lt;li>&lt;strong>검증 기법&lt;/strong>: 서명 기반 인증, 임계치 다중서명, 커밋 리빌, 신뢰 실행 환경 원격 증명, TLS 증빙, 메르클 증명 등 선택지 존재&lt;/li>
&lt;li>&lt;strong>데이터 신선도&lt;/strong>: 하트비트 주기, 변경 폭 임계치 기반 갱신 트리거, 최대 지연 한도 설정&lt;/li>
&lt;li>&lt;strong>전달 보안&lt;/strong>: 콜백 함수 화이트리스트와 접근 제어 논스·타임스탬프로 리플레이 방지&lt;/li>
&lt;li>&lt;strong>비용 모델&lt;/strong>: 온체인 저장과 콜백은 가스 비용 증가 업데이트 주기와 보안 강도를 목적에 맞춰 절충 필요&lt;/li>
&lt;/ul>
&lt;h2 id="위협-모델과-취약점">위협 모델과 취약점&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>데이터 원천 조작&lt;/strong>: 저유동성 구간이나 플래시론을 이용한 가격 왜곡&lt;/li>
&lt;li>&lt;strong>MEV와 타이밍&lt;/strong>: 블록 포함 순서와 재구성에 따른 관측 시점 왜곡&lt;/li>
&lt;li>&lt;strong>블록 타임 오용&lt;/strong>: block.timestamp는 제한적 조작 허용 범위가 있어 현실 시간 대체로 부적합&lt;/li>
&lt;li>&lt;strong>릴레이 재생&lt;/strong>: 과거 응답 재사용 시도 논스·체인ID·세션 바인딩으로 차단 필요&lt;/li>
&lt;li>&lt;strong>키 관리&lt;/strong>: 운영 키 탈취 시 악성 업데이트 가능 임계치 서명과 HSM 사용 권장&lt;/li>
&lt;li>&lt;strong>TEE 한계&lt;/strong>: 측채널과 신규 취약점 가능성 원격 증빙 검증과 이중화 필요&lt;/li>
&lt;li>&lt;strong>브리지 혼동&lt;/strong>: 교차체인 메시징은 오라클과 유사하나 보안 가정과 합의 상속 방식이 다름 경계 구분 필요&lt;/li>
&lt;/ul>
&lt;h2 id="설계-패턴">설계 패턴&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>푸시형 가격 피드&lt;/strong>: 오라클이 주기적으로 포스트 컨슈머는 최신값을 읽고 신선도 검사&lt;/li>
&lt;li>&lt;strong>풀형 요청 응답&lt;/strong>: 컨슈머가 자산·시장·윈도우를 명시해 요청 생성 오라클이 비동기로 응답&lt;/li>
&lt;li>&lt;strong>낙관적 오라클&lt;/strong>: 먼저 값을 게시하고 이의 제기 윈도우 동안 분쟁 없으면 확정 파생상품과 거버넌스 판정에 유용&lt;/li>
&lt;li>&lt;strong>라이트클라이언트 기반&lt;/strong>: 다른 체인의 상태를 검증 가능한 증명으로 반영 신뢰를 오라클에서 원체인 합의로 이동시키는 접근&lt;/li>
&lt;/ul>
&lt;h2 id="간단-예시">간단 예시&lt;/h2>
&lt;p>가격 피드를 읽고 오래된 값은 거부하는 최소 구현 예시&lt;/p></description></item><item><title>커스토디얼 vs 논커스토디얼 월렛 비교</title><link>https://handsupmin.github.io/posts/custodial-vs-noncustodial-wallets-274b74/</link><pubDate>Tue, 23 Sep 2025 13:09:26 +0000</pubDate><guid>https://handsupmin.github.io/posts/custodial-vs-noncustodial-wallets-274b74/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>프라이빗키 관리 방식에 따라 암호화폐 월렛은 &lt;strong>커스토디얼(custodial)&lt;/strong> 과 &lt;strong>논커스토디얼(noncustodial)&lt;/strong> 로 구분됨
각 방식의 차이와 선택 기준, 보안·운영 리스크와 대응 방안을 &lt;strong>초보자도 이해할 수 있게&lt;/strong> 정리하면서 &lt;strong>실무자가 바로 적용할 수 있는 체크리스트&lt;/strong>까지 제시함&lt;/p>
&lt;hr>
&lt;h3 id="핵심-개념">핵심 개념&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>커스토디얼 월렛&lt;/strong>
제3자 서비스가 사용자의 프라이빗키를 보관하고 서명을 대행하는 구조
로그인·출금 등은 서비스 인증 절차를 거쳐 처리됨&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>논커스토디얼 월렛&lt;/strong>
사용자가 프라이빗키를 직접 보유·관리하는 구조
브라우저 확장 지갑·모바일 앱 지갑·하드웨어 지갑이 대표적 사례임&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>핵심 차이 한 줄 정리&lt;/strong>
키의 &lt;strong>소유·통제 주체&lt;/strong>가 제3자인가 사용자 본인인가의 차이&lt;/p></description></item></channel></rss>