<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Defi on HandsLog</title><link>https://handsupmin.github.io/tags/defi/</link><description>Recent content in Defi on HandsLog</description><generator>Hugo -- 0.146.0</generator><language>ko-kr</language><lastBuildDate>Fri, 10 Oct 2025 13:09:08 +0000</lastBuildDate><atom:link href="https://handsupmin.github.io/tags/defi/index.xml" rel="self" type="application/rss+xml"/><item><title>Solana 아키텍처와 핵심 기술 개념 정리</title><link>https://handsupmin.github.io/posts/solana-architecture-and-core-concepts-13bec9/</link><pubDate>Fri, 10 Oct 2025 13:09:08 +0000</pubDate><guid>https://handsupmin.github.io/posts/solana-architecture-and-core-concepts-13bec9/</guid><description>&lt;h3 id="개념과-배경">개념과 배경&lt;/h3>
&lt;p>Solana는 처리량과 비용 효율을 우선한 퍼블릭 블록체인으로, 스마트 컨트랙트와 디앱 실행에 맞춘 고성능 설계를 채택함
목표는 낮은 지연, 높은 TPS, 저렴한 수수료를 동시에 달성하는 것임
이를 위해 시간 합의 보조 기법과 병렬 실행 런타임, 네트워크 전파 최적화를 결합하여 기존 블록체인의 병목을 줄이는 방향으로 진화해옴&lt;/p>
&lt;h3 id="핵심-개념과-정의">핵심 개념과 정의&lt;/h3>
&lt;ul>
&lt;li>Proof of History PoH
&lt;ul>
&lt;li>연속 해시를 이용해 시간 순서를 암호학적으로 증명하는 기법&lt;/li>
&lt;li>트랜잭션 도착 순서와 이벤트 시퀀스를 사전 정렬하는 효과를 제공, 합의 과정의 통신 오버헤드 감소&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Proof of Stake PoS와 Tower BFT
&lt;ul>
&lt;li>스테이크에 기반한 검증자 선택과 투표로 합의 진행&lt;/li>
&lt;li>PoH가 제공하는 글로벌 시계에 기대어 빠른 파이널리티를 지향하는 BFT 스타일 합의 운영&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Sealevel
&lt;ul>
&lt;li>계정 락 기반의 병렬 실행 엔진&lt;/li>
&lt;li>트랜잭션이 접근하는 계정을 명시하도록 강제하여 충돌 없는 작업을 동시 실행&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Gulf Stream
&lt;ul>
&lt;li>멤풀을 최소화하고 차기 리더에게 트랜잭션을 선제적으로 전달&lt;/li>
&lt;li>리더 슬롯 시작 즉시 실행 가능 상태 확보, 대기 시간 단축&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Turbine
&lt;ul>
&lt;li>데이터 전파를 소형 패킷으로 샤딩해 계층적으로 확산&lt;/li>
&lt;li>대역폭 사용 최적화와 패킷 손실 내성 강화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Pipelining, Cloudbreak
&lt;ul>
&lt;li>블록 생산과 검증 파이프라인 분리, 저장소 레이아웃 최적화로 I/O 병목 완화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>네트워크 및 수수료 모델
&lt;ul>
&lt;li>QUIC 기반 전송 채널과 로컬 수수료 시장, 우선순위 수수료로 혼잡 구간에서 성능 저하 완화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="동작-원리와-구조">동작 원리와 구조&lt;/h3>
&lt;ul>
&lt;li>리더 스케줄과 슬롯
&lt;ul>
&lt;li>스테이크 가중치에 따라 검증자가 슬롯 단위로 리더 역할을 수행, 트랜잭션을 블록에 포함&lt;/li>
&lt;li>투표 트랜잭션으로 블록 체인을 확정하고 보상 분배&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>계정 기반 프로그래밍 모델
&lt;ul>
&lt;li>프로그램은 불변 코드, 계정은 상태 저장소 역할&lt;/li>
&lt;li>트랜잭션은 접근할 계정 목록과 읽기/쓰기 권한을 사전에 선언, 런타임이 계정 충돌을 감지해 병렬화 결정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>병렬 실행의 성패 포인트
&lt;ul>
&lt;li>계정 충돌이 적을수록 Sealevel의 병렬성이 극대화됨&lt;/li>
&lt;li>동일한 인기 계정을 다수 트랜잭션이 동시에 수정하려 하면 직렬화 발생&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>리소스와 한도
&lt;ul>
&lt;li>트랜잭션 크기 제한, 컴퓨트 유닛 한도, 서명 수 제한 등 존재&lt;/li>
&lt;li>우선순위 수수료를 통해 혼잡 시 처리 순위를 조정 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="주요-사용-사례">주요 사용 사례&lt;/h3>
&lt;ul>
&lt;li>디파이
&lt;ul>
&lt;li>고빈도 거래와 주문 체결 같은 지연 민감 워크로드에 유리한 환경&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>NFT 및 디지털 자산
&lt;ul>
&lt;li>낮은 수수료와 빠른 민팅·전송 경험&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>게임 및 실시간 애플리케이션
&lt;ul>
&lt;li>짧은 확정 시간을 요구하는 상호작용형 시나리오에 적합&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>토큰 발행
&lt;ul>
&lt;li>표준 라이브러리 기반의 토큰 정의, 전송, 메타데이터 관리 지원&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="다른-블록체인과의-비교">다른 블록체인과의 비교&lt;/h3>
&lt;p>아래 값은 네트워크 상태, 클라이언트 구현, 하드웨어 조건에 따라 달라질 수 있는 대표 지표로 이해할 것&lt;/p></description></item><item><title>디파이 DEX 가이드: 유니스왑과 AMM 이해, V1~V3 핵심 변화</title><link>https://handsupmin.github.io/posts/defi-dex-uniswap-amm-v1-v3-guide-4e209f/</link><pubDate>Sun, 05 Oct 2025 13:05:25 +0000</pubDate><guid>https://handsupmin.github.io/posts/defi-dex-uniswap-amm-v1-v3-guide-4e209f/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>유니스왑은 AMM 기반 DEX의 표준을 사실상 정의한 프로토콜로 평가받음
이 글은 유니스왑의 핵심 개념과 AMM 구조, V1→V2→V3로 이어진 변화의 맥락을 정리함
오더북 기반 초창기 DEX의 한계를 짚고, 왜 AMM이 필요한지, 유동성과 슬리피지가 어떤 상관을 가지는지, V3에서 자본 효율성이 어떻게 극적으로 개선되었는지까지 실무 관점으로 설명함&lt;/p>
&lt;h3 id="배경과-맥락">배경과 맥락&lt;/h3>
&lt;p>CEX는 주문 매칭과 자산 보관을 중앙 시스템에서 수행하는 구조
사용자는 체결 속도와 편의성은 얻지만, 온체인 투명성과 자기 보관이라는 블록체인의 장점을 활용하지 못함
초기 DEX는 오더북을 온체인에 올리는 방식을 시도했으나 가스 비용, 확장성, 낮은 유동성으로 사용자 경험이 제한됨
이 한계를 우회한 접근이 AMM 기반 모델이며, 유니스왑은 단순하고 검증 가능한 가격 결정 규칙을 온체인에 구현해 대중화에 성공함&lt;/p></description></item><item><title>WETH 이해와 활용 가이드 – ETH를 ERC-20로 포장하는 이유와 동작 원리</title><link>https://handsupmin.github.io/posts/weth-eth-erc20-guide-683552/</link><pubDate>Wed, 01 Oct 2025 13:10:22 +0000</pubDate><guid>https://handsupmin.github.io/posts/weth-eth-erc20-guide-683552/</guid><description>&lt;h3 id="개념배경">개념/배경&lt;/h3>
&lt;p>WETH는 이더리움 네트워크의 기본 자산인 ETH를 ERC-20 표준과 호환되도록 포장한 토큰을 의미함
ETH 자체는 계정 잔고 모델을 따르며 ERC-20 인터페이스를 구현하지 않음
반면 대부분의 디파이 프로토콜과 토큰 간 상호작용은 ERC-20을 전제로 동작함
이 간극을 메우기 위해 1:1 가치로 교환 가능한 WETH가 사용됨&lt;/p>
&lt;p>핵심은 호환성과 일관성임
WETH를 사용하면 ETH를 일반적인 ERC-20 토큰처럼 전송, 승인, 보관, 스왑 등 동일한 방식으로 다룰 수 있음&lt;/p>
&lt;h3 id="핵심-개념과-정의">핵심 개념과 정의&lt;/h3>
&lt;ul>
&lt;li>정의: ETH를 스마트 컨트랙트에 예치하고 동일 수량의 ERC-20 토큰을 발행한 형태의 래핑 자산&lt;/li>
&lt;li>가치 페깅: 1 WETH = 1 ETH를 목표로 하며 언제든 역변환 가능&lt;/li>
&lt;li>표준 호환: ERC-20 인터페이스 준수로 승인, 전송, 수령 등 동작이 통일됨&lt;/li>
&lt;li>커스터디 모델: 컨트랙트가 ETH를 보관하고, 사용자는 WETH를 보유하여 권리를 표현함&lt;/li>
&lt;/ul>
&lt;h3 id="동작-원리">동작 원리&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>래핑 흐름&lt;/p></description></item><item><title>블록체인 오라클 개념, 유형, 동작 원리</title><link>https://handsupmin.github.io/posts/blockchain-oracle-guide-91a3d2/</link><pubDate>Sat, 27 Sep 2025 13:05:51 +0000</pubDate><guid>https://handsupmin.github.io/posts/blockchain-oracle-guide-91a3d2/</guid><description>&lt;h2 id="개념과-배경">개념과 배경&lt;/h2>
&lt;p>스마트 컨트랙트는 체인 내부 상태만 신뢰하고 외부 네트워크에 직접 접근하지 않음
가격·날씨·게임 결과 같은 외부 데이터를 참조하려면 중간자 역할이 필요함
오라클은 외부 데이터를 온체인으로 들여오거나 온체인 이벤트를 외부 시스템에 전달하는 인터페이스 역할 수행
이 연결이 잘못 설계되면 컨트랙트의 무결성이 오라클 신뢰도에 종속되는 구조적 한계가 발생함&lt;/p>
&lt;h2 id="핵심-개념과-정의">핵심 개념과 정의&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>오라클&lt;/strong>: 블록체인과 외부 세계를 잇는 데이터 브리지 역할&lt;/li>
&lt;li>&lt;strong>인바운드 오라클&lt;/strong>: 외부 데이터를 온체인으로 주입&lt;/li>
&lt;li>&lt;strong>아웃바운드 오라클&lt;/strong>: 온체인 이벤트를 외부 서비스나 장치로 전달&lt;/li>
&lt;li>&lt;strong>중앙화 오라클&lt;/strong>: 단일 주체가 데이터 제공 단일 실패 지점과 조작 리스크 존재&lt;/li>
&lt;li>&lt;strong>탈중앙화 오라클&lt;/strong>: 다수 노드와 다중 소스 집계 신뢰성과 가용성 강화 대신 비용과 복잡도 상승&lt;/li>
&lt;li>&lt;strong>소프트웨어 오라클&lt;/strong>: API 기반 웹 데이터 공급&lt;/li>
&lt;li>&lt;strong>하드웨어 오라클&lt;/strong>: 센서·IoT 장치에서 물리 정보 수집과 증빙 제공&lt;/li>
&lt;li>&lt;strong>오라클 문제&lt;/strong>: 체인 합의는 내부 상태만 보장 외부 진실성은 합의 밖에 있어 신뢰 경계가 오라클로 이동하는 과제 존재&lt;/li>
&lt;/ul>
&lt;h2 id="동작-원리와-구조">동작 원리와 구조&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>요청 응답 패턴&lt;/strong>: 컨트랙트가 요청을 생성하고 오라클 네트워크가 수집·검증 후 결과를 콜백으로 전달&lt;/li>
&lt;li>&lt;strong>퍼블리시 패턴&lt;/strong>: 오라클이 주기적으로 데이터를 온체인에 게시하고 컨슈머는 읽기만 수행&lt;/li>
&lt;li>&lt;strong>집계 방식&lt;/strong>: 다중 소스 수집 후 중앙값 또는 가중 평균 산출 이상치 제거 규칙 포함&lt;/li>
&lt;li>&lt;strong>검증 기법&lt;/strong>: 서명 기반 인증, 임계치 다중서명, 커밋 리빌, 신뢰 실행 환경 원격 증명, TLS 증빙, 메르클 증명 등 선택지 존재&lt;/li>
&lt;li>&lt;strong>데이터 신선도&lt;/strong>: 하트비트 주기, 변경 폭 임계치 기반 갱신 트리거, 최대 지연 한도 설정&lt;/li>
&lt;li>&lt;strong>전달 보안&lt;/strong>: 콜백 함수 화이트리스트와 접근 제어 논스·타임스탬프로 리플레이 방지&lt;/li>
&lt;li>&lt;strong>비용 모델&lt;/strong>: 온체인 저장과 콜백은 가스 비용 증가 업데이트 주기와 보안 강도를 목적에 맞춰 절충 필요&lt;/li>
&lt;/ul>
&lt;h2 id="위협-모델과-취약점">위협 모델과 취약점&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>데이터 원천 조작&lt;/strong>: 저유동성 구간이나 플래시론을 이용한 가격 왜곡&lt;/li>
&lt;li>&lt;strong>MEV와 타이밍&lt;/strong>: 블록 포함 순서와 재구성에 따른 관측 시점 왜곡&lt;/li>
&lt;li>&lt;strong>블록 타임 오용&lt;/strong>: block.timestamp는 제한적 조작 허용 범위가 있어 현실 시간 대체로 부적합&lt;/li>
&lt;li>&lt;strong>릴레이 재생&lt;/strong>: 과거 응답 재사용 시도 논스·체인ID·세션 바인딩으로 차단 필요&lt;/li>
&lt;li>&lt;strong>키 관리&lt;/strong>: 운영 키 탈취 시 악성 업데이트 가능 임계치 서명과 HSM 사용 권장&lt;/li>
&lt;li>&lt;strong>TEE 한계&lt;/strong>: 측채널과 신규 취약점 가능성 원격 증빙 검증과 이중화 필요&lt;/li>
&lt;li>&lt;strong>브리지 혼동&lt;/strong>: 교차체인 메시징은 오라클과 유사하나 보안 가정과 합의 상속 방식이 다름 경계 구분 필요&lt;/li>
&lt;/ul>
&lt;h2 id="설계-패턴">설계 패턴&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>푸시형 가격 피드&lt;/strong>: 오라클이 주기적으로 포스트 컨슈머는 최신값을 읽고 신선도 검사&lt;/li>
&lt;li>&lt;strong>풀형 요청 응답&lt;/strong>: 컨슈머가 자산·시장·윈도우를 명시해 요청 생성 오라클이 비동기로 응답&lt;/li>
&lt;li>&lt;strong>낙관적 오라클&lt;/strong>: 먼저 값을 게시하고 이의 제기 윈도우 동안 분쟁 없으면 확정 파생상품과 거버넌스 판정에 유용&lt;/li>
&lt;li>&lt;strong>라이트클라이언트 기반&lt;/strong>: 다른 체인의 상태를 검증 가능한 증명으로 반영 신뢰를 오라클에서 원체인 합의로 이동시키는 접근&lt;/li>
&lt;/ul>
&lt;h2 id="간단-예시">간단 예시&lt;/h2>
&lt;p>가격 피드를 읽고 오래된 값은 거부하는 최소 구현 예시&lt;/p></description></item></channel></rss>