<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Pnpm on HandsLog</title><link>https://handsupmin.github.io/tags/pnpm/</link><description>Recent content in Pnpm on HandsLog</description><generator>Hugo -- 0.146.0</generator><language>ko-kr</language><lastBuildDate>Sat, 20 Sep 2025 16:44:51 +0000</lastBuildDate><atom:link href="https://handsupmin.github.io/tags/pnpm/index.xml" rel="self" type="application/rss+xml"/><item><title>pnpm 설치 방식과 워크스페이스 사용법</title><link>https://handsupmin.github.io/posts/pnpm/</link><pubDate>Sat, 20 Sep 2025 16:44:51 +0000</pubDate><guid>https://handsupmin.github.io/posts/pnpm/</guid><description>&lt;h3 id="서문">서문&lt;/h3>
&lt;p>pnpm은 npm과 유사한 CLI를 제공하면서도 의존성 저장 구조에서 차별점을 둔 패키지 매니저입니다. 대규모 모노레포나 여러 프로젝트를 동시에 관리할 때 중복 패키지로 인한 디스크 낭비를 줄이고 설치 속도를 개선하는 것이 목적입니다. 이 글은 pnpm의 설치 동작 원리와 워크스페이스 활용 방법을 실무 관점에서 정리합니다.&lt;/p>
&lt;h3 id="개념-및-배경">개념 및 배경&lt;/h3>
&lt;p>pnpm은 기본적으로 각 프로젝트의 package.json에 정의된 의존성만 설치합니다. 그러나 실제 패키지 파일은 사용자의 전용 글로벌 저장소(예: ~/.pnpm-store)에 다운로드되어 보관됩니다. 프로젝트의 node_modules에는 실제 파일 대신 글로벌 저장소의 패키지로 향하는 심볼릭 링크가 생성됩니다. 이 구조 덕분에 동일한 패키지가 여러 프로젝트에서 필요할 때 물리적 복제가 발생하지 않음.&lt;/p></description></item></channel></rss>