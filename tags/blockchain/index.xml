<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Blockchain on HandsLog</title><link>https://handsupmin.github.io/tags/blockchain/</link><description>Recent content in Blockchain on HandsLog</description><generator>Hugo -- 0.146.0</generator><language>ko-kr</language><lastBuildDate>Mon, 29 Sep 2025 13:10:22 +0000</lastBuildDate><atom:link href="https://handsupmin.github.io/tags/blockchain/index.xml" rel="self" type="application/rss+xml"/><item><title>영지식 증명 ZKP의 개념과 동작 원리, 디지털 서명과의 차이</title><link>https://handsupmin.github.io/posts/zkp-concepts-and-how-it-works-vs-digital-signatures-1338b0/</link><pubDate>Mon, 29 Sep 2025 13:10:22 +0000</pubDate><guid>https://handsupmin.github.io/posts/zkp-concepts-and-how-it-works-vs-digital-signatures-1338b0/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>영지식 증명은 어떤 명제가 참임을 설득하면서도 그 명제의 근거가 되는 비밀 자체는 끝까지 드러내지 않는 암호학적 절차를 의미함
블록체인과 프라이버시 보존 컴퓨팅에서 필수 도구로 자리 잡았으며, 범용 컴퓨팅에 대한 검증을 작은 증명으로 압축하는 현대 프로토콜의 기초로 쓰임
이 글은 기본 개념과 직관, 수학적 성질, 대화형과 비대화형의 차이, 디지털 서명과의 구분점, 이산로그 기반 간단 프로토콜의 구조까지 한 번에 정리함&lt;/p>
&lt;h3 id="목적과-맥락">목적과 맥락&lt;/h3>
&lt;ul>
&lt;li>비밀을 공개하지 않고 유효성만 검증하고 싶은 요구 증가&lt;/li>
&lt;li>퍼블릭 블록체인에서 데이터 공개 없이 정합성을 보장하려는 니즈 확대&lt;/li>
&lt;li>오프체인 연산을 온체인에 작은 증명으로 제출해 확장성과 비용을 개선하려는 동기 존재&lt;/li>
&lt;/ul>
&lt;h3 id="핵심-개념과-정의">핵심 개념과 정의&lt;/h3>
&lt;ul>
&lt;li>Prover 비밀을 가진 참여자, 비밀을 공개하지 않고 명제의 참을 설득하려는 주체&lt;/li>
&lt;li>Verifier 검증하는 참여자, Prover가 비밀을 가진 사실 또는 명제가 참이라는 사실만 확인하고 싶음&lt;/li>
&lt;li>Witness 또는 Secret 명제의 참을 뒷받침하는 비밀 값 또는 비밀 지식&lt;/li>
&lt;li>Statement 공개 가능한 명제 표현, 예시로 y = g^x mod p에서 x를 알고 있음을 증명하는 형태&lt;/li>
&lt;li>Challenge 검증자가 무작위 도전값을 제시하는 단계, 사기 가능성을 줄이고 사운드니스를 높이는 역할&lt;/li>
&lt;li>Transcript 또는 View 대화형 상호작용의 기록, 시뮬레이터가 동일 분포로 재현 가능해야 영지식 성질이 성립함&lt;/li>
&lt;/ul>
&lt;h3 id="영지식-증명의-세-가지-성질">영지식 증명의 세 가지 성질&lt;/h3>
&lt;ul>
&lt;li>완전성 Completeness 정직한 Prover가 비밀을 가지고 있다면 정직한 Verifier는 높은 확률로 설득됨&lt;/li>
&lt;li>건전성 Soundness 비밀이 없으면 Prover가 Verifier를 속일 확률이 매우 낮음, 반복과 큰 도전 공간으로 확률을 지수적으로 낮춤&lt;/li>
&lt;li>영지식성 Zero-Knowledge Verifier는 명제가 참이라는 것 외 어떠한 추가 정보도 얻지 못함, 시뮬레이터가 실제 대화 기록과 식별 불가능한 트랜스크립트를 생성 가능해야 함&lt;/li>
&lt;/ul>
&lt;h3 id="직관적-예시-알리바바-동굴">직관적 예시 알리바바 동굴&lt;/h3>
&lt;p>A와 B 두 갈래가 있고 가운데 문이 막혀 있다고 가정
문을 여는 주문이 비밀, 주문을 알면 어느 쪽으로 들어가도 반대편으로 나올 수 있음
검증자는 Prover가 동굴에 들어간 뒤 무작위로 A 또는 B로 나오라고 요구함
Prover가 주문을 모르면 자신이 들어간 쪽과 같은 쪽을 요구받을 때만 성공 가능, 성공 확률 1/2에 불과함
이 과정을 k회 반복하면 거짓말로 모두 통과할 확률은 1/2^k로 감소함
검증자는 주문의 구체 내용은 전혀 알 수 없고, Prover가 주문을 안다는 사실만 높은 확률로 확신 가능함&lt;/p></description></item><item><title>블록체인 오라클 개념, 유형, 동작 원리와 실무 가이드</title><link>https://handsupmin.github.io/posts/blockchain-oracle-guide-91a3d2/</link><pubDate>Sat, 27 Sep 2025 13:05:51 +0000</pubDate><guid>https://handsupmin.github.io/posts/blockchain-oracle-guide-91a3d2/</guid><description>&lt;h3 id="개념과-배경">개념과 배경&lt;/h3>
&lt;p>스마트 컨트랙트는 체인 내부 상태만 신뢰하고 외부 네트워크에 직접 접근하지 않음
가격 정보나 날씨, 게임 결과 같은 외부 데이터를 참조하려면 중간자 역할이 필요함
오라클은 외부 데이터를 온체인으로 들여오거나 온체인 이벤트를 외부 시스템에 전달하는 인터페이스 역할 수행
이 연결이 제대로 설계되지 않으면 스마트 컨트랙트의 무결성이 오라클 신뢰도에 종속되는 구조적 한계 발생&lt;/p>
&lt;h3 id="핵심-개념과-정의">핵심 개념과 정의&lt;/h3>
&lt;p>오라클 정의 블록체인과 외부 세계 간 데이터 브리지
인바운드 오라클 외부 데이터를 온체인으로 주입
아웃바운드 오라클 온체인 이벤트를 외부 서비스나 장치로 전달
중앙화 오라클 단일 주체가 데이터 제공 간단하고 빠르나 단일 실패 지점과 조작 리스크 존재
탈중앙화 오라클 다수 노드와 다중 소스 집계 신뢰성과 가용성 강화 대신 비용과 설계 복잡도 상승
소프트웨어 오라클 API 기반 웹 데이터 공급
하드웨어 오라클 센서·IoT 장치에서 물리 정보 수집
오라클 문제 체인은 합의로 안전하지만 외부 세계의 진실성은 합의 밖에 있음 신뢰 경계가 오라클로 이동하는 문제를 어떻게 통제할지의 과제&lt;/p></description></item><item><title>Off-chain 개념과 데이터 가용성: zkRollup vs Validium 비교</title><link>https://handsupmin.github.io/posts/off-chain-data-availability-zkrollup-validium-274b74/</link><pubDate>Thu, 25 Sep 2025 13:10:01 +0000</pubDate><guid>https://handsupmin.github.io/posts/off-chain-data-availability-zkrollup-validium-274b74/</guid><description>&lt;h3 id="개념-및-배경">개념 및 배경&lt;/h3>
&lt;p>Off‑chain은 블록체인 &lt;strong>외부&lt;/strong>에서 연산·저장을 수행하고 &lt;strong>필요한 증명 또는 요약만 온체인에 게시&lt;/strong>하는 접근을 말함
목표는 &lt;strong>가스비 절감&lt;/strong>, &lt;strong>처리량 확대&lt;/strong>, &lt;strong>데이터 활용 유연성 확보&lt;/strong>임
온체인은 합의와 정산의 최소 핵심만 유지하고, 나머지는 오프체인 시스템으로 이전하는 설계 철학임&lt;/p>
&lt;hr>
&lt;h3 id="핵심-개념과-정의">핵심 개념과 정의&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Off‑chain 처리&lt;/strong>
트랜잭션 집계·상태 채널 업데이트·인덱싱·분석 등을 체인 밖에서 수행하고 결과 요약만 온체인에 커밋하는 방식임&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Off‑chain Data Availability DA&lt;/strong>
트랜잭션 본문은 오프체인에 보관하고 온체인에는 검증용 최소 데이터와 &lt;strong>유효성 또는 사기 증명&lt;/strong>만 올리는 모델임
데이터 보관자나 분산 스토리지의 &lt;strong>지속 제공&lt;/strong>을 신뢰하거나 경제적 인센티브로 강제하는 설계가 필요함&lt;/p></description></item><item><title>커스토디얼 vs 논커스토디얼 월렛 비교</title><link>https://handsupmin.github.io/posts/custodial-vs-noncustodial-wallets-274b74/</link><pubDate>Tue, 23 Sep 2025 13:09:26 +0000</pubDate><guid>https://handsupmin.github.io/posts/custodial-vs-noncustodial-wallets-274b74/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>프라이빗키 관리 방식에 따라 암호화폐 월렛은 &lt;strong>커스토디얼(custodial)&lt;/strong> 과 &lt;strong>논커스토디얼(noncustodial)&lt;/strong> 로 구분됨
각 방식의 차이와 선택 기준, 보안·운영 리스크와 대응 방안을 &lt;strong>초보자도 이해할 수 있게&lt;/strong> 정리하면서 &lt;strong>실무자가 바로 적용할 수 있는 체크리스트&lt;/strong>까지 제시함&lt;/p>
&lt;hr>
&lt;h3 id="핵심-개념">핵심 개념&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>커스토디얼 월렛&lt;/strong>
제3자 서비스가 사용자의 프라이빗키를 보관하고 서명을 대행하는 구조
로그인·출금 등은 서비스 인증 절차를 거쳐 처리됨&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>논커스토디얼 월렛&lt;/strong>
사용자가 프라이빗키를 직접 보유·관리하는 구조
브라우저 확장 지갑·모바일 앱 지갑·하드웨어 지갑이 대표적 사례임&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>핵심 차이 한 줄 정리&lt;/strong>
키의 &lt;strong>소유·통제 주체&lt;/strong>가 제3자인가 사용자 본인인가의 차이&lt;/p></description></item><item><title>블록체인이란? 블록체인 개념 총정리</title><link>https://handsupmin.github.io/posts/blockchain-principles-mining-hash-274b74/</link><pubDate>Mon, 22 Sep 2025 13:10:11 +0000</pubDate><guid>https://handsupmin.github.io/posts/blockchain-principles-mining-hash-274b74/</guid><description>&lt;h2 id="개요">개요&lt;/h2>
&lt;p>블록체인은 &lt;strong>중앙 기관 없이&lt;/strong> 참여자들이 거래를 기록·검증·공유하는 &lt;strong>분산 원장&lt;/strong> 기술임
이 글은 블록체인을 &lt;strong>초보자 친화적으로&lt;/strong> 설명하고, &lt;strong>실무 체크리스트&lt;/strong>까지 정리함&lt;/p>
&lt;hr>
&lt;h2 id="큰-그림-시스템-구성">큰 그림: 시스템 구성&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>노드(Node)&lt;/strong>: 블록체인 소프트웨어 실행 주체&lt;/p>
&lt;ul>
&lt;li>&lt;strong>풀노드&lt;/strong>: 모든 블록·트랜잭션 검증·저장&lt;/li>
&lt;li>&lt;strong>라이트 클라이언트&lt;/strong>: 헤더·머클 증명 기반 최소 검증&lt;/li>
&lt;li>(참고) &lt;strong>아카이브 노드&lt;/strong>: 오래된 상태 포함 전체 상태 유지(필수 아님)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>블록(Block)&lt;/strong>: 트랜잭션 묶음 + 메타데이터(블록헤더). 블록들이 선형 체인으로 연결됨&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>합의(Consensus)&lt;/strong>: 어떤 블록이 정식 이력인지 네트워크가 &lt;strong>공동으로&lt;/strong> 결정하는 규칙&lt;/p>
&lt;ul>
&lt;li>PoW: 작업증명(연산 경쟁)&lt;/li>
&lt;li>PoS: 지분증명(검증자·보증금 기반)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="해시hash와-위변조-방지">해시(Hash)와 위·변조 방지&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>해시 함수(SHA-256, Keccak-256 등)&lt;/strong>: 입력을 고정 길이로 압축하는 일방향 함수임&lt;/p></description></item><item><title>머클트리(Merkle Tree)란? 머클트리의 개념과 블록체인에서의 역할</title><link>https://handsupmin.github.io/posts/merkle-tree-blockchain-role-274b74/</link><pubDate>Sat, 20 Sep 2025 17:15:26 +0000</pubDate><guid>https://handsupmin.github.io/posts/merkle-tree-blockchain-role-274b74/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>머클트리는 블록체인에서 거래 집합을 &lt;strong>안전하고 효율적으로 요약·검증&lt;/strong>하기 위해 쓰이는 핵심 자료구조임
블록 헤더에 머클루트가 포함되는 이유는 블록 안의 모든 거래를 &lt;strong>고정 크기 해시 하나&lt;/strong>로 대표해 무결성 확인과 경량 검증을 가능하게 하기 때문임
이 글은 머클트리의 구조와 동작 원리, 블록체인에서의 실무적 의미와 구현 주의사항까지 초보자도 이해할 수 있도록 상세히 설명함&lt;/p>
&lt;hr>
&lt;h3 id="핵심-개념과-구조">핵심 개념과 구조&lt;/h3>
&lt;ul>
&lt;li>머클트리는 보통 &lt;strong>이진 트리&lt;/strong> 형태로 구현함&lt;/li>
&lt;li>거래들을 &lt;strong>리프(leaf)&lt;/strong> 로 두고 인접 두 리프의 해시를 이어 붙여 부모 해시를 만들며 이 과정을 반복해 &lt;strong>루트 해시&lt;/strong>를 얻음&lt;/li>
&lt;li>해시 함수는 체인별로 다르며 비트코인은 &lt;strong>더블 SHA‑256&lt;/strong>, 이더리움은 트라이 구조에서 &lt;strong>Keccak‑256&lt;/strong> 을 사용함&lt;/li>
&lt;li>최상단 해시를 &lt;strong>머클루트(Merkle root)&lt;/strong> 라 부르며 크기는 해시 함수에 따라 고정됨&lt;/li>
&lt;li>리프 수가 홀수일 때는 마지막 리프를 &lt;strong>복제해 짝을 맞추는 방식&lt;/strong>이 일반적이며 비트코인은 이 규칙을 사용함&lt;/li>
&lt;li>트리 깊이는 리프 수 N에 대해 &lt;strong>⌈log₂ N⌉&lt;/strong> 에 비례하므로 대량의 거래를 효율적으로 요약할 수 있음&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="동작-원리와-장점">동작 원리와 장점&lt;/h3>
&lt;ul>
&lt;li>인접 노드 해시 &lt;strong>H_left || H_right&lt;/strong> 를 순서대로 연결해 해시를 계산하고 이를 위로 올려가며 루트 해시를 얻음&lt;/li>
&lt;li>&lt;strong>무결성 검증&lt;/strong>
단일 거래가 바뀌면 해당 리프에서 루트까지의 모든 경로 해시가 바뀌어 변조를 즉시 탐지할 수 있음&lt;/li>
&lt;li>&lt;strong>효율적 포함 증명&lt;/strong>
특정 거래가 블록에 포함되었음을 증명하려면 그 거래와 경로상의 &lt;strong>형제 해시들만&lt;/strong> 있으면 됨
필요한 해시 개수는 &lt;strong>O(log N)&lt;/strong> 으로 작아 대역폭과 검증 비용이 작음&lt;/li>
&lt;li>&lt;strong>확장성 보조&lt;/strong>
리프가 1,000,000개여도 증명에 필요한 형제 해시는 약 20개 수준으로 32바이트 해시 기준 약 640바이트에 불과함&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="블록-헤더와-경량-노드spv">블록 헤더와 경량 노드(SPV)&lt;/h3>
&lt;ul>
&lt;li>비트코인 블록 헤더는 이전 블록 해시, 머클루트, 난스 등 합의 관련 메타데이터를 포함함&lt;/li>
&lt;li>경량 노드(SPV)는 &lt;strong>블록 전체가 아니라 헤더 체인만&lt;/strong> 받아 신뢰성을 확보하고, 개별 거래에 대해서는 풀노드로부터 &lt;strong>머클 증명&lt;/strong> 을 받아 포함 여부를 검증함&lt;/li>
&lt;li>이 방식은 모바일·임베디드 환경에서도 실사용이 가능하게 하는 기반이 됨&lt;/li>
&lt;li>이더리움은 전통적인 이진 머클트리 대신 &lt;strong>머클‑패트리샤 트라이(MPT)&lt;/strong> 를 사용해 거래·영수증·상태 루트를 헤더에 담아 유사한 목적을 달성함&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="구현-세부와-체인별-차이">구현 세부와 체인별 차이&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>비트코인&lt;/strong>&lt;/p></description></item><item><title>NFT 핵심 용어 정리</title><link>https://handsupmin.github.io/posts/nft-23q12akw/</link><pubDate>Sat, 20 Sep 2025 16:56:17 +0000</pubDate><guid>https://handsupmin.github.io/posts/nft-23q12akw/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>NFT 커뮤니티 초입에서 마주치는 용어 장벽을 낮추기 위해 &lt;strong>리빌&lt;/strong>, &lt;strong>에어드롭&lt;/strong>, &lt;strong>화이트리스트&lt;/strong>, &lt;strong>마켓플레이스&lt;/strong>를 실무 관점으로 정리함
핵심은 개념 이해를 넘어 &lt;strong>운영 체크리스트&lt;/strong>, &lt;strong>보안 리스크&lt;/strong>, &lt;strong>가격 형성 메커니즘&lt;/strong>까지 파악해 프로젝트 참여와 거래 판단에 바로 쓰도록 하는 것임&lt;/p>
&lt;hr>
&lt;h2 id="공통-전제와-기본-개념">공통 전제와 기본 개념&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>NFT 표준&lt;/strong>
주로 ERC‑721과 ERC‑1155를 사용함
721은 1토큰 1소유 형태에 적합, 1155는 대량 발행·세미펀지블에 유리함&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>메타데이터와 저장소&lt;/strong>
토큰 URI가 가리키는 메타데이터는 IPFS나 Arweave 등 영속 스토리지 사용 권장
중앙화 서버만 쓰면 리빌 이후 임의 변경 리스크가 커짐&lt;/p></description></item><item><title>NFT란? NFT 핵심 개념 정리</title><link>https://handsupmin.github.io/posts/nft-concept-20gd0fl/</link><pubDate>Sat, 20 Sep 2025 16:41:07 +0000</pubDate><guid>https://handsupmin.github.io/posts/nft-concept-20gd0fl/</guid><description>&lt;h3 id="서문">서문&lt;/h3>
&lt;p>NFT는 몇 년 새 대중의 관심을 받았지만 개념과 절차가 분산돼 있어 입문자가 막히기 쉬움
이 글은 &lt;strong>실무자 관점&lt;/strong>에서 NFT의 핵심 개념을 단계적으로 정리하고 &lt;strong>구매·발행·보관 시 유의사항&lt;/strong>과 &lt;strong>운영 관행&lt;/strong>을 담는 것을 목표로 함&lt;/p>
&lt;hr>
&lt;h3 id="개념과-배경">개념과 배경&lt;/h3>
&lt;p>NFT는 Non‑Fungible Token의 약자이며 대체 불가능한 토큰을 의미함
동일 단위끼리 교환 가능한 자산은 펀저블 토큰이라 부르고 NFT는 각 토큰이 &lt;strong>고유 식별자와 속성&lt;/strong>을 가져 상호 교환 시 동일 가치를 보장하지 않음
블록체인에 기록된 소유권은 변경이 어렵고 거래 이력이 투명하게 남는다는 장점이 있음
온체인 소유권이 &lt;strong>저작권·초상권 등 법적 권리와 자동 동치가 아님&lt;/strong>에 유의해야 함&lt;/p></description></item></channel></rss>