<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Transaction on HandsLog</title>
    <link>https://handsupmin.github.io/tags/transaction/</link>
    <description>Recent content in Transaction on HandsLog</description>
    <generator>Hugo -- 0.146.0</generator>
    <language>ko-kr</language>
    <lastBuildDate>Wed, 22 Oct 2025 13:12:18 +0000</lastBuildDate>
    <atom:link href="https://handsupmin.github.io/tags/transaction/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL InnoDB 장단점과 운영 시 주의사항 정리</title>
      <link>https://handsupmin.github.io/posts/mysql-innodb-pros-cons-and-cautions-4b2d90/</link>
      <pubDate>Wed, 22 Oct 2025 13:12:18 +0000</pubDate>
      <guid>https://handsupmin.github.io/posts/mysql-innodb-pros-cons-and-cautions-4b2d90/</guid>
      <description>&lt;h3 id=&#34;개요&#34;&gt;개요&lt;/h3&gt;
&lt;p&gt;MySQL InnoDB는 ACID 트랜잭션을 기본으로 지원하는 스토리지 엔진으로 데이터 무결성과 동시성 보장을 목표로 설계됨
Row-level lock, MVCC, 클러스터형 인덱스, 외래 키, 크래시 리커버리 등 기능을 통해 OLTP 환경에서 안정적인 처리 성능 제공
아래는 InnoDB의 장단점과 운영 시 주의사항을 정리한 내용임&lt;/p&gt;
&lt;h3 id=&#34;핵심-개념&#34;&gt;핵심 개념&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;클러스터형 인덱스 기반 저장 구조
&lt;ul&gt;
&lt;li&gt;기본 키(PK) 순서대로 데이터 페이지에 정렬 저장&lt;/li&gt;
&lt;li&gt;보조 인덱스는 리프에 PK를 포함하여 PK 탐색으로 실제 레코드 접근&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MVCC와 일관 읽기
&lt;ul&gt;
&lt;li&gt;Undo 로그 기반 버전 관리로 일관 읽기 제공&lt;/li&gt;
&lt;li&gt;쓰기와 읽기 동시 처리 시 경합을 줄여 높은 동시성 달성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;트랜잭션과 크래시 리커버리
&lt;ul&gt;
&lt;li&gt;Redo 로그로 커밋 데이터의 내구성 확보&lt;/li&gt;
&lt;li&gt;Doublewrite 버퍼로 부분 쓰기 방지&lt;/li&gt;
&lt;li&gt;비정상 종료 후 복구 경로 확보&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;장점&#34;&gt;장점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;트랜잭션 ACID 보장&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;COMMIT, ROLLBACK, SAVEPOINT로 안전한 트랜잭션 경계 관리 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Row-level lock 기반 높은 동시성&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;필요한 행만 잠금으로 쓰기 경합을 최소화&lt;/li&gt;
&lt;li&gt;테이블 락 기반 엔진 대비 OLTP에 유리&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;외래 키 제약으로 참조 무결성 유지&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;부모 자식 간 참조 일관성 DB 레벨에서 강제&lt;/li&gt;
&lt;li&gt;애플리케이션 측 검증 부담 감소&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;크래시 리커버리 안정성&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Redo/Undo 로그와 Doublewrite로 장애 상황에서도 데이터 무결성 유지&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;클러스터형 인덱스의 빠른 PK 접근과 범위 스캔 효율&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;PK 기반 조회 및 순차 범위 스캔에서 강점&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;MVCC로 읽기 일관성과 동시 처리 성능 확보&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;롱 리드와 빈번한 쓰기가 공존하는 시나리오에 적합&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;대규모 OLTP 워크로드에 적합&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;대량의 INSERT/UPDATE/DELETE 처리에서 일관된 성능과 안정성 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;단점&#34;&gt;단점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;메모리 사용량 큼&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Buffer Pool 등 캐시 구조로 메모리 요구량 높음&lt;/li&gt;
&lt;li&gt;메모리 부족 시 디스크 I/O 증가로 성능 저하 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;클러스터형 인덱스 특성에 따른 PK 설계 민감도 높음&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;PK 업데이트는 물리 재배치와 페이지 분할 유발 가능&lt;/li&gt;
&lt;li&gt;긴 문자열 PK 사용 시 저장 비효율 및 분할 증가 위험&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;디스크 공간 사용량 상대적으로 큼&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Undo/Redo, Doublewrite, 각종 메타데이터로 파일 규모 증가 가능&lt;/li&gt;
&lt;li&gt;대량 갱신 후 조각화 우려&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;파라미터가 많아 운영 난이도 존재&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;innodb_buffer_pool_size, innodb_log_file_size, innodb_flush_method 등 튜닝 필요&lt;/li&gt;
&lt;li&gt;부적절한 설정 시 기대 성능 미달 위험&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;외래 키로 인한 잠금 경합과 데드락 리스크 증가&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;다중 FK 검증 경로가 얽히면 경합 심화&lt;/li&gt;
&lt;li&gt;삽입·삭제 순서 제약으로 트랜잭션 복잡도 증가&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Read-heavy 분석형 워크로드 적합성 한계&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;대규모 단순 조회 중심 OLAP 성격은 컬럼 지향 분석 시스템이 유리한 경우 존재&lt;/li&gt;
&lt;li&gt;과거 일부 읽기 패턴에서 MyISAM이 빠른 사례가 있었으나 현재는 InnoDB가 기본 선택지로 자리함&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;운영-시-주의사항과-베스트-프랙티스&#34;&gt;운영 시 주의사항과 베스트 프랙티스&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;명시적 PK 또는 고유 인덱스 필수&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;명시적 PK 없으면 숨은 Row ID 사용으로 비효율 발생 가능&lt;/li&gt;
&lt;li&gt;변경이 드문 짧은 정수형 PK 선호 예) INT AUTO_INCREMENT, BIGINT&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Buffer Pool 사이즈 적정화&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;innodb_buffer_pool_size는 핵심 파라미터&lt;/li&gt;
&lt;li&gt;가능한 많은 데이터 페이지를 메모리에 유지할수록 I/O 절감 효과 큼&lt;/li&gt;
&lt;li&gt;서버 메모리 대비 높은 비중 할당 권장하나 워크로드와 여유 메모리 고려하여 점진 조정&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;FK 사용 최소화 및 인덱스 정합성 확보&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;꼭 필요한 관계에만 FK 적용&lt;/li&gt;
&lt;li&gt;FK 컬럼에 적절한 인덱스 부여로 잠금 경합과 테이블 스캔 방지&lt;/li&gt;
&lt;li&gt;트랜잭션 내 잠금 순서 일관성 유지로 데드락 확률 낮추기&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Row format과 페이지 전략 선택&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;ROW_FORMAT=DYNAMIC 등으로 긴 TEXT/BLOB를 오프페이지화하여 저장 효율 개선&lt;/li&gt;
&lt;li&gt;크게 보이지 않는 설정이라도 대규모 테이블에서 성능과 공간 효율에 영향 큼&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Auto-increment 충돌 방지&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;레플리케이션 또는 멀티 라이터 시나리오에서 키 충돌 방지 전략 필요&lt;/li&gt;
&lt;li&gt;innodb_autoinc_lock_mode 값 검토 및 키 공간 분할 또는 시퀀스 전략 병행&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;통계 갱신과 조각화 대응&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;ANALYZE TABLE로 옵티마이저 통계 최신화&lt;/li&gt;
&lt;li&gt;OPTIMIZE TABLE 또는 테이블 리빌드로 심한 조각화 해소와 공간 회수 검토&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;데드락 모니터링 루틴화&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;SHOW ENGINE INNODB STATUS와 information_schema의 INNODB_TRX, INNODB_LOCKS, INNODB_LOCK_WAITS로 원인 추적&lt;/li&gt;
&lt;li&gt;쿼리 접근 순서 정렬, 트랜잭션 단위 축소, 적절한 인덱싱으로 예방&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;로그 크기와 플러시 정책의 트레이드오프 이해&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;innodb_log_file_size, innodb_flush_log_at_trx_commit, sync_binlog 설정이 지연 시간과 내구성에 직접 영향&lt;/li&gt;
&lt;li&gt;허용 가능한 데이터 손실 범위와 지연 요구사항에 맞춰 설정 조정&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;마무리&#34;&gt;마무리&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;장점 요약
&lt;ul&gt;
&lt;li&gt;ACID 트랜잭션, Row-level lock, MVCC, FK, 클러스터형 인덱스, 안정적 크래시 리커버리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;단점 요약
&lt;ul&gt;
&lt;li&gt;메모리와 디스크 사용량 큼, 설정 복잡도 존재, PK 설계 민감, FK로 인한 경합과 데드락 리스크&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;운영 체크리스트
&lt;ul&gt;
&lt;li&gt;짧은 정수형 명시적 PK 설계&lt;/li&gt;
&lt;li&gt;Buffer Pool 및 로그 정책 튜닝&lt;/li&gt;
&lt;li&gt;FK 최소화와 인덱스 정합성 확보&lt;/li&gt;
&lt;li&gt;정기 통계 갱신과 조각화 관리, 데드락 모니터링
적절한 설정과 스키마 설계를 병행하면 OLTP 환경에서 높은 안정성과 성능을 동시에 달성 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;참고자료&#34;&gt;참고자료&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/innodb-storage-engine.html&#34;&gt;https://dev.mysql.com/doc/refman/8.0/en/innodb-storage-engine.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/innodb-introduction.html&#34;&gt;https://dev.mysql.com/doc/refman/8.0/en/innodb-introduction.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-model.html&#34;&gt;https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-model.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/innodb-multi-versioning.html&#34;&gt;https://dev.mysql.com/doc/refman/8.0/en/innodb-multi-versioning.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html&#34;&gt;https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/innodb-buffer-pool.html&#34;&gt;https://dev.mysql.com/doc/refman/8.0/en/innodb-buffer-pool.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/innodb-file-system-architecture.html&#34;&gt;https://dev.mysql.com/doc/refman/8.0/en/innodb-file-system-architecture.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html&#34;&gt;https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/innodb-optimizing-innodb-operations.html&#34;&gt;https://dev.mysql.com/doc/refman/8.0/en/innodb-optimizing-innodb-operations.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
