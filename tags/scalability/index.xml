<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Scalability on HandsLog</title><link>https://handsupmin.github.io/tags/scalability/</link><description>Recent content in Scalability on HandsLog</description><generator>Hugo -- 0.146.0</generator><language>ko-kr</language><lastBuildDate>Sat, 11 Oct 2025 13:05:12 +0000</lastBuildDate><atom:link href="https://handsupmin.github.io/tags/scalability/index.xml" rel="self" type="application/rss+xml"/><item><title>블록체인 합의 알고리즘 가이드 — PoW, PoS와 영지식증명 활용</title><link>https://handsupmin.github.io/posts/blockchain-consensus-algorithms-pow-pos-and-zero-knowledge-proofs-2946e5/</link><pubDate>Sat, 11 Oct 2025 13:05:12 +0000</pubDate><guid>https://handsupmin.github.io/posts/blockchain-consensus-algorithms-pow-pos-and-zero-knowledge-proofs-2946e5/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>퍼블릭 블록체인은 중앙 관리자 없이 다수 참여자가 같은 상태를 공유해야 함
이때 모두가 믿을 수 있는 하나의 기록을 선택하는 규칙이 필요하며 이를 합의 알고리즘이라 부름
합의는 성능과 보안, 탈중앙화 사이의 균형 문제이기도 함
PoW와 PoS는 대표적 합의 방식이며 최근에는 영지식증명 같은 암호 기법이 개인정보 보호와 검증 간소화에 결합되는 추세임
실무 관점에서 각 방식의 원리와 트레이드오프, 영지식증명과의 접점을 정리함&lt;/p>
&lt;h3 id="합의가-필요한-이유와-기준">합의가 필요한 이유와 기준&lt;/h3>
&lt;ul>
&lt;li>안전성 안전하게 하나의 정본을 고수하고 이중 지불 등 불변성 파괴가 발생하지 않음&lt;/li>
&lt;li>활성 상태 네트워크 지연이나 일부 장애가 있어도 새 블록 생성이 지속됨&lt;/li>
&lt;li>최종성 일단 확정된 거래가 되돌려지지 않음 확률적 또는 결정적 최종성으로 구분됨&lt;/li>
&lt;li>시빌 내성 가짜 참여자 대량 생성 공격에 저항함 경제적 비용 또는 신원 검증 기반 메커니즘 필요&lt;/li>
&lt;li>성능 처리량과 지연 시간 목표를 명확히 해야 함 블록 간격, 블록 크기, 검증 비용이 관건&lt;/li>
&lt;li>탈중앙화 검증 참여 문턱을 낮춰 누구나 검증 가능하도록 설계 권장 풀 집중이나 소수 지배를 억제할 유인 설계 필요&lt;/li>
&lt;/ul>
&lt;h3 id="pow-작업증명-핵심">PoW 작업증명 핵심&lt;/h3>
&lt;p>정의 특정 난이도의 해시 퍼즐을 풀어 블록 제안권을 얻는 방식 채굴자가 해시 연산을 반복해 목표값 미만의 해시를 찾는 구조
구성 요소 블록 헤더 난이도 목표값 논스 해시 함수 작업 증명 검증은 O(1)에 가까움 제안은 대량 계산 필요
난이도 조정 네트워크 전체 해시 파워 변화를 따라 목표 블록 간격을 유지하도록 주기적 재조정 수행
보안 모델 정직한 해시 파워가 과반을 차지하면 긴 사슬이 정본이 됨 51% 공격은 다수 해시력으로 과거 일부 구간을 재작성하는 위협을 의미
장점&lt;/p></description></item><item><title>Solana 아키텍처와 핵심 기술 개념 정리</title><link>https://handsupmin.github.io/posts/solana-architecture-and-core-concepts-13bec9/</link><pubDate>Fri, 10 Oct 2025 13:09:08 +0000</pubDate><guid>https://handsupmin.github.io/posts/solana-architecture-and-core-concepts-13bec9/</guid><description>&lt;h3 id="개념과-배경">개념과 배경&lt;/h3>
&lt;p>Solana는 처리량과 비용 효율을 우선한 퍼블릭 블록체인으로, 스마트 컨트랙트와 디앱 실행에 맞춘 고성능 설계를 채택함
목표는 낮은 지연, 높은 TPS, 저렴한 수수료를 동시에 달성하는 것임
이를 위해 시간 합의 보조 기법과 병렬 실행 런타임, 네트워크 전파 최적화를 결합하여 기존 블록체인의 병목을 줄이는 방향으로 진화해옴&lt;/p>
&lt;h3 id="핵심-개념과-정의">핵심 개념과 정의&lt;/h3>
&lt;ul>
&lt;li>Proof of History PoH
&lt;ul>
&lt;li>연속 해시를 이용해 시간 순서를 암호학적으로 증명하는 기법&lt;/li>
&lt;li>트랜잭션 도착 순서와 이벤트 시퀀스를 사전 정렬하는 효과를 제공, 합의 과정의 통신 오버헤드 감소&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Proof of Stake PoS와 Tower BFT
&lt;ul>
&lt;li>스테이크에 기반한 검증자 선택과 투표로 합의 진행&lt;/li>
&lt;li>PoH가 제공하는 글로벌 시계에 기대어 빠른 파이널리티를 지향하는 BFT 스타일 합의 운영&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Sealevel
&lt;ul>
&lt;li>계정 락 기반의 병렬 실행 엔진&lt;/li>
&lt;li>트랜잭션이 접근하는 계정을 명시하도록 강제하여 충돌 없는 작업을 동시 실행&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Gulf Stream
&lt;ul>
&lt;li>멤풀을 최소화하고 차기 리더에게 트랜잭션을 선제적으로 전달&lt;/li>
&lt;li>리더 슬롯 시작 즉시 실행 가능 상태 확보, 대기 시간 단축&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Turbine
&lt;ul>
&lt;li>데이터 전파를 소형 패킷으로 샤딩해 계층적으로 확산&lt;/li>
&lt;li>대역폭 사용 최적화와 패킷 손실 내성 강화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Pipelining, Cloudbreak
&lt;ul>
&lt;li>블록 생산과 검증 파이프라인 분리, 저장소 레이아웃 최적화로 I/O 병목 완화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>네트워크 및 수수료 모델
&lt;ul>
&lt;li>QUIC 기반 전송 채널과 로컬 수수료 시장, 우선순위 수수료로 혼잡 구간에서 성능 저하 완화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="동작-원리와-구조">동작 원리와 구조&lt;/h3>
&lt;ul>
&lt;li>리더 스케줄과 슬롯
&lt;ul>
&lt;li>스테이크 가중치에 따라 검증자가 슬롯 단위로 리더 역할을 수행, 트랜잭션을 블록에 포함&lt;/li>
&lt;li>투표 트랜잭션으로 블록 체인을 확정하고 보상 분배&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>계정 기반 프로그래밍 모델
&lt;ul>
&lt;li>프로그램은 불변 코드, 계정은 상태 저장소 역할&lt;/li>
&lt;li>트랜잭션은 접근할 계정 목록과 읽기/쓰기 권한을 사전에 선언, 런타임이 계정 충돌을 감지해 병렬화 결정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>병렬 실행의 성패 포인트
&lt;ul>
&lt;li>계정 충돌이 적을수록 Sealevel의 병렬성이 극대화됨&lt;/li>
&lt;li>동일한 인기 계정을 다수 트랜잭션이 동시에 수정하려 하면 직렬화 발생&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>리소스와 한도
&lt;ul>
&lt;li>트랜잭션 크기 제한, 컴퓨트 유닛 한도, 서명 수 제한 등 존재&lt;/li>
&lt;li>우선순위 수수료를 통해 혼잡 시 처리 순위를 조정 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="주요-사용-사례">주요 사용 사례&lt;/h3>
&lt;ul>
&lt;li>디파이
&lt;ul>
&lt;li>고빈도 거래와 주문 체결 같은 지연 민감 워크로드에 유리한 환경&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>NFT 및 디지털 자산
&lt;ul>
&lt;li>낮은 수수료와 빠른 민팅·전송 경험&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>게임 및 실시간 애플리케이션
&lt;ul>
&lt;li>짧은 확정 시간을 요구하는 상호작용형 시나리오에 적합&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>토큰 발행
&lt;ul>
&lt;li>표준 라이브러리 기반의 토큰 정의, 전송, 메타데이터 관리 지원&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="다른-블록체인과의-비교">다른 블록체인과의 비교&lt;/h3>
&lt;p>아래 값은 네트워크 상태, 클라이언트 구현, 하드웨어 조건에 따라 달라질 수 있는 대표 지표로 이해할 것&lt;/p></description></item><item><title>zkSync 생태계 정리, Era와 Elastic Chain으로 보는 ZK-Rollup 확장 전략</title><link>https://handsupmin.github.io/posts/zksync-ecosystem-era-elastic-chain-zk-rollup-84f049/</link><pubDate>Thu, 09 Oct 2025 13:10:21 +0000</pubDate><guid>https://handsupmin.github.io/posts/zksync-ecosystem-era-elastic-chain-zk-rollup-84f049/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>이더리움은 보안과 탈중앙성을 유지하는 대신 처리량과 비용에서 제약이 큼. zkSync는 ZK-Rollup 기반 Layer 2로 이 문제를 해결하는 접근. 본 글은 zkSync의 기술 맥락, Era와 Elastic Chain의 차이, 선택과 운영 시 고려사항까지 한 번에 정리&lt;/p>
&lt;h3 id="핵심-개념">핵심 개념&lt;/h3>
&lt;ul>
&lt;li>ZK-Rollup
&lt;ul>
&lt;li>많은 트랜잭션을 L2에서 묶어 처리한 뒤, 유효성 증명만 L1에 게시하는 구조&lt;/li>
&lt;li>데이터 가용성은 L1에 유지하거나 적어도 L1에서 검증 가능한 형태로 공개&lt;/li>
&lt;li>결과적으로 수수료 절감, 처리량 증가, L1 수준의 보안 상속&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>zkSync
&lt;ul>
&lt;li>ZK-Rollup 기술을 구현한 L2 생태계의 총칭&lt;/li>
&lt;li>개발자 관점에서는 EVM 호환성과 도구 연계를 통해 기존 개발 흐름 재사용 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="동작-원리와-구성">동작 원리와 구성&lt;/h3>
&lt;ul>
&lt;li>트랜잭션 집계
&lt;ul>
&lt;li>사용자의 L2 트랜잭션을 모아 배치로 처리&lt;/li>
&lt;li>상태 전이 결과와 증명을 생성해 L1에 제출&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>유효성 증명
&lt;ul>
&lt;li>SNARK 등 영지식 증명으로 배치가 올바르게 실행되었음을 보장&lt;/li>
&lt;li>L1 컨트랙트는 증명만 검증하므로 가스 비용과 시간 절감&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터 경로
&lt;ul>
&lt;li>입금은 L1에서 L2로 메시지 브릿지를 통해 반영&lt;/li>
&lt;li>출금은 L2 상태가 L1에 최종화된 후 반영, ZK의 빠른 최종성으로 대기 시간 단축&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>보안 상속
&lt;ul>
&lt;li>합의와 데이터 가용성을 L1에 의존, L2 운영자의 악의적 행위가 있어도 증명 검증 단계에서 차단&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="zksync-era-소개">zkSync Era 소개&lt;/h3>
&lt;ul>
&lt;li>목적
&lt;ul>
&lt;li>ZK-Rollup 기반 메인 L2 네트워크 역할&lt;/li>
&lt;li>개발자와 사용자가 바로 활용 가능한 범용 실행 환경 제공&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>특징
&lt;ul>
&lt;li>EVM 호환성 중심 설계, 기존 Solidity 코드와 툴체인 재사용 가능&lt;/li>
&lt;li>낮은 가스비와 빠른 최종성으로 사용자 경험 개선&lt;/li>
&lt;li>L1과의 브릿지 제공, 자산 이동과 메시지 전달 지원&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>사용 사례
&lt;ul>
&lt;li>DeFi, NFT 마켓, 온체인 게임, 소액 결제 등 비용 민감 워크로드&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="zksync-elastic-chain-소개">zkSync Elastic Chain 소개&lt;/h3>
&lt;ul>
&lt;li>배경
&lt;ul>
&lt;li>단일 L2로는 급증하는 수요를 충분히 흡수하기 어려움. 애플리케이션별 요구가 크게 다름&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>개념
&lt;ul>
&lt;li>HyperChains라 부르는 상호 연결된 L2 체인의 네트워크를 지향&lt;/li>
&lt;li>각 체인이 독립적으로 확장과 커스터마이즈 가능, 공통 보안 원칙과 메시징으로 연결&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>특징
&lt;ul>
&lt;li>모듈식 설계. 실행 환경, 수수료 정책, 데이터 가용성 옵션 등 선택 가능&lt;/li>
&lt;li>ZK-Rollup과 체인 간 상호운용을 결합, 대규모 병렬 처리 지향&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>기대 효과
&lt;ul>
&lt;li>멀티체인 앱 구성 용이, 트래픽 분산으로 병목 최소화&lt;/li>
&lt;li>유동성과 사용자 경험을 네트워크 레벨에서 개선&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="era와-elastic-chain-비교-관점">Era와 Elastic Chain 비교 관점&lt;/h3>
&lt;ul>
&lt;li>기술 축
&lt;ul>
&lt;li>Era는 단일 범용 L2 실행 환경&lt;/li>
&lt;li>Elastic Chain은 다중 체인 연결과 모듈성에 초점&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>확장성
&lt;ul>
&lt;li>Era는 높은 처리량을 제공하나 단일 도메인 한계 존재&lt;/li>
&lt;li>Elastic Chain은 체인 수평 확장으로 매우 높은 처리량 추구&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>유연성
&lt;ul>
&lt;li>Era는 범용성 우선, 구성 선택지는 제한적&lt;/li>
&lt;li>Elastic Chain은 애플리케이션 맞춤형 체인 구성 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>마이그레이션 난이도
&lt;ul>
&lt;li>Era는 EVM 호환으로 이식 용이&lt;/li>
&lt;li>Elastic Chain은 설계 선택지가 많아 거버넌스, 상호운용, 유동성 전략 설계 필요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="장점-정리">장점 정리&lt;/h3>
&lt;ul>
&lt;li>이더리움 보안 상속으로 신뢰도 확보&lt;/li>
&lt;li>ZK 기반 최종성으로 빠른 출금과 낮은 지연&lt;/li>
&lt;li>가스 비용 절감, 소액 트랜잭션도 경제성 확보&lt;/li>
&lt;li>EVM 호환으로 기존 개발 생태계 재사용 가능&lt;/li>
&lt;/ul>
&lt;h3 id="한계와-주의-사항">한계와 주의 사항&lt;/h3>
&lt;ul>
&lt;li>복잡성
&lt;ul>
&lt;li>영지식 증명과 롤업 인프라 이해 필요, 디버깅과 관측성 도구 숙련도 요구&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>생태계 성숙도
&lt;ul>
&lt;li>일부 영역은 아직 빠르게 변화 중. 프로토콜 업그레이드와 호환성 변화 리스크 존재&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>운영 중앙화 요소
&lt;ul>
&lt;li>시퀀서 운영과 업그레이드 권한의 탈중앙화 진행 단계 확인 필요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>수수료와 데이터 가용성 옵션
&lt;ul>
&lt;li>온체인 데이터 게시 전략에 따라 비용과 보안이 달라짐. 요구사항 기반 선택 필요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="베스트-프랙티스">베스트 프랙티스&lt;/h3>
&lt;ul>
&lt;li>계약 이식
&lt;ul>
&lt;li>표준 라이브러리와 검증된 패턴 우선 사용, 어셈블리와 저수준 호출 최소화&lt;/li>
&lt;li>체인 간 메시지 지연과 재조합 실패를 고려한 상태머신 설계&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>보안
&lt;ul>
&lt;li>롤업 브릿지 신뢰 가정 명시, 긴급 정지나 업그레이드 권한의 범위 문서화&lt;/li>
&lt;li>감사와 버그바운티 병행, 운영 키 분리와 다중서명 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>관측성
&lt;ul>
&lt;li>L2 노드 지표, 배치 제출 상태, 증명 생성 지연 등 핵심 메트릭 모니터링&lt;/li>
&lt;li>롤업 상태와 브릿지 이벤트를 데이터 파이프라인으로 수집해 이상 탐지 구성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>비용 관리
&lt;ul>
&lt;li>가스 최적화와 배치 타이밍 고려. 이벤트 로그 최소화, 스토리지 쓰기 횟수 절감&lt;/li>
&lt;li>트래픽 스파이크 대비 레이트 리미트와 큐잉 도입&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="간단-선택-가이드">간단 선택 가이드&lt;/h3>
&lt;ul>
&lt;li>단일 체인에서 빠른 이식과 범용 디앱 운영이 필요하면 Era 적합&lt;/li>
&lt;li>대규모 트래픽 분산, 애플리케이션 맞춤 정책, 체인 간 상호운용을 전제로 설계한다면 Elastic Chain 고려&lt;/li>
&lt;li>규제, 거버넌스, 데이터 보존 요구가 명확하다면 모듈식 옵션을 비교 평가 후 결정&lt;/li>
&lt;/ul>
&lt;h3 id="마무리">마무리&lt;/h3>
&lt;p>zkSync는 ZK-Rollup의 보안과 효율을 실사용 수준으로 끌어올린 생태계. Era는 당장 사용할 수 있는 범용 L2 환경을, Elastic Chain은 장기 확장을 위한 네트워크형 설계를 제시. 워크로드 특성과 조직의 리스크 허용도를 바탕으로 보안, 비용, 최종성, 운영 복잡성의 균형점을 잡는 것이 핵심&lt;/p></description></item><item><title>롤업 네트워크의 개념과 동작 원리, 옵티미스틱 vs ZK 롤업</title><link>https://handsupmin.github.io/posts/rollup-network-concepts-optimistic-vs-zk-1b9d9c/</link><pubDate>Tue, 07 Oct 2025 13:10:05 +0000</pubDate><guid>https://handsupmin.github.io/posts/rollup-network-concepts-optimistic-vs-zk-1b9d9c/</guid><description>&lt;h3 id="개념배경">개념/배경&lt;/h3>
&lt;p>롤업은 레이어 2에서 다수 트랜잭션을 묶어 처리하고 요약 데이터만 레이어 1에 기록하는 확장 솔루션
레이어 1의 보안을 그대로 이용하면서 처리량 증가와 수수료 절감 달성&lt;/p>
&lt;h3 id="핵심-개념">핵심 개념&lt;/h3>
&lt;p>옵티미스틱 롤업 기본 유효 가정, 이의 제기 기간에 사기 증명 사용, EVM 호환 유리
ZK 롤업 영지식 증명으로 즉시 검증, 빠른 확정성과 출금, 증명 생성 복잡도와 비용 존재&lt;/p>
&lt;h3 id="동작-원리">동작 원리&lt;/h3>
&lt;p>시퀀서가 트랜잭션을 배치로 모아 데이터 가용성 형태로 L1에 게시
검증은 사기 증명 또는 유효성 증명 사용
출금 시간은 옵티미스틱은 챌린지 기간 필요, ZK는 증명 생성 시간에 좌우&lt;/p></description></item></channel></rss>