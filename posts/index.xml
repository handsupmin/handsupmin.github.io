<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on HandsLog</title><link>https://handsupmin.github.io/posts/</link><description>Recent content in Posts on HandsLog</description><generator>Hugo -- 0.146.0</generator><language>ko-kr</language><lastBuildDate>Thu, 02 Oct 2025 13:07:56 +0000</lastBuildDate><atom:link href="https://handsupmin.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Viem으로 이더리움 읽기·쓰기 시작하기 가이드</title><link>https://handsupmin.github.io/posts/viem-ethereum-read-write-guide-4a5336/</link><pubDate>Thu, 02 Oct 2025 13:07:56 +0000</pubDate><guid>https://handsupmin.github.io/posts/viem-ethereum-read-write-guide-4a5336/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>Viem은 이더리움 계열 체인과 상호작용하는 경량 Web3 클라이언트 라이브러리임
ethers나 web3.js와 같은 범용 라이브러리와 동일한 범주의 도구지만, 모듈 분리 구조와 타입 안전성, 빌드 사이즈, 성능에서 강점이 있음
프로덕션에서 자주 필요한 읽기와 쓰기 흐름을 중심으로, 설치부터 블록 조회, 컨트랙트 읽기, 컨트랙트 쓰기까지의 필수 개념과 실용 팁 정리&lt;/p>
&lt;h3 id="핵심-개념과-정의">핵심 개념과 정의&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Public Client&lt;/p>
&lt;ul>
&lt;li>퍼블릭 RPC를 통해 체인 데이터 읽기 전용 호출 수행하는 클라이언트&lt;/li>
&lt;li>블록, 트랜잭션, 로그 조회, read-only 컨트랙트 호출 담당&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Wallet Client&lt;/p></description></item><item><title>WETH 이해와 활용 가이드 – ETH를 ERC-20로 포장하는 이유와 동작 원리</title><link>https://handsupmin.github.io/posts/weth-eth-erc20-guide-683552/</link><pubDate>Wed, 01 Oct 2025 13:10:22 +0000</pubDate><guid>https://handsupmin.github.io/posts/weth-eth-erc20-guide-683552/</guid><description>&lt;h3 id="개념배경">개념/배경&lt;/h3>
&lt;p>WETH는 이더리움 네트워크의 기본 자산인 ETH를 ERC-20 표준과 호환되도록 포장한 토큰을 의미함
ETH 자체는 계정 잔고 모델을 따르며 ERC-20 인터페이스를 구현하지 않음
반면 대부분의 디파이 프로토콜과 토큰 간 상호작용은 ERC-20을 전제로 동작함
이 간극을 메우기 위해 1:1 가치로 교환 가능한 WETH가 사용됨&lt;/p>
&lt;p>핵심은 호환성과 일관성임
WETH를 사용하면 ETH를 일반적인 ERC-20 토큰처럼 전송, 승인, 보관, 스왑 등 동일한 방식으로 다룰 수 있음&lt;/p>
&lt;h3 id="핵심-개념과-정의">핵심 개념과 정의&lt;/h3>
&lt;ul>
&lt;li>정의: ETH를 스마트 컨트랙트에 예치하고 동일 수량의 ERC-20 토큰을 발행한 형태의 래핑 자산&lt;/li>
&lt;li>가치 페깅: 1 WETH = 1 ETH를 목표로 하며 언제든 역변환 가능&lt;/li>
&lt;li>표준 호환: ERC-20 인터페이스 준수로 승인, 전송, 수령 등 동작이 통일됨&lt;/li>
&lt;li>커스터디 모델: 컨트랙트가 ETH를 보관하고, 사용자는 WETH를 보유하여 권리를 표현함&lt;/li>
&lt;/ul>
&lt;h3 id="동작-원리">동작 원리&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>래핑 흐름&lt;/p></description></item><item><title>스테이킹 핵심 개념과 이더리움 검증자 32 ETH 요건</title><link>https://handsupmin.github.io/posts/staking-basics-ethereum-validator-32eth-8cc2be/</link><pubDate>Tue, 30 Sep 2025 13:10:16 +0000</pubDate><guid>https://handsupmin.github.io/posts/staking-basics-ethereum-validator-32eth-8cc2be/</guid><description>&lt;h3 id="개념">개념&lt;/h3>
&lt;p>스테이킹은 여러 사용자가 자금을 모아 검증자 노드를 운영하고 보상과 위험을 지분 비율로 공유하는 참여 모델&lt;/p>
&lt;h3 id="동작">동작&lt;/h3>
&lt;p>검증자에는 최소 예치금 필요
이더리움은 32 ETH 요구
풀에 위임하면 노드가 검증을 수행하고 발생 보상을 분배
규정 위반이나 다운타임 발생 시 슬래싱으로 원금 일부 손실 위험&lt;/p>
&lt;h3 id="참고자료">참고자료&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://ethereum.org/en/staking/">https://ethereum.org/en/staking/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://polkadot.network/learn/staking/">https://polkadot.network/learn/staking/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>영지식 증명 ZKP의 개념과 동작 원리, 디지털 서명과의 차이</title><link>https://handsupmin.github.io/posts/zkp-concepts-and-how-it-works-vs-digital-signatures-1338b0/</link><pubDate>Mon, 29 Sep 2025 13:10:22 +0000</pubDate><guid>https://handsupmin.github.io/posts/zkp-concepts-and-how-it-works-vs-digital-signatures-1338b0/</guid><description>&lt;h2 id="개요">개요&lt;/h2>
&lt;p>영지식 증명은 어떤 명제가 참임을 설득하면서도 그 근거가 되는 비밀은 끝까지 숨기는 절차를 말함
블록체인과 프라이버시 보존 컴퓨팅에서 핵심 도구로 자리 잡았고 범용 계산의 유효성을 작은 증명으로 압축해 전달하는 현대 프로토콜의 기초로 쓰임
이 글은 기본 개념과 직관, 수학적 성질, 대화형과 비대화형의 차이, 디지털 서명과의 구분, 이산로그 기반 간단 Σ-프로토콜까지 한 번에 정리함&lt;/p>
&lt;h2 id="목적과-맥락">목적과 맥락&lt;/h2>
&lt;ul>
&lt;li>비밀을 공개하지 않고 유효성만 검증하려는 요구 증가&lt;/li>
&lt;li>퍼블릭 블록체인에서 데이터 비공개 유지와 정합성 보장 필요 확대&lt;/li>
&lt;li>오프체인 연산을 온체인에 작은 증명으로 제출해 확장성과 비용 개선 추구&lt;/li>
&lt;/ul>
&lt;h2 id="핵심-개념과-정의">핵심 개념과 정의&lt;/h2>
&lt;ul>
&lt;li>Prover 비밀을 가진 참여자. 비밀을 공개하지 않고 명제의 참을 설득하려는 주체&lt;/li>
&lt;li>Verifier 검증자. Prover가 비밀을 가진 사실 또는 명제가 참이라는 사실만 확인하려는 주체&lt;/li>
&lt;li>Witness 또는 Secret 명제의 참을 뒷받침하는 비밀 값 또는 비밀 지식&lt;/li>
&lt;li>Statement 공개 가능한 명제 표현. 예 y = g^x mod p에서 x를 알고 있음을 증명&lt;/li>
&lt;li>Challenge 검증자가 제시하는 무작위 도전값. 조작 불가와 예측 불가가 전제&lt;/li>
&lt;li>Transcript 또는 View 대화형 상호작용의 기록. 시뮬레이터가 동일 분포로 재현 가능해야 영지식 성립&lt;/li>
&lt;/ul>
&lt;h2 id="영지식-증명의-세-가지-성질">영지식 증명의 세 가지 성질&lt;/h2>
&lt;ul>
&lt;li>완전성 Completeness 정직한 Prover가 비밀을 가지고 있으면 정직한 Verifier는 높은 확률로 설득됨&lt;/li>
&lt;li>건전성 Soundness 비밀이 없으면 Prover가 속일 확률이 매우 낮음. 도전 공간 확대나 반복으로 속임 확률을 지수적으로 낮춤&lt;/li>
&lt;li>영지식성 Zero-Knowledge Verifier는 명제가 참이라는 사실 외 추가 정보를 얻지 못함. 시뮬레이터가 실제와 구별 불가한 트랜스크립트를 비밀 없이 생성 가능해야 함&lt;/li>
&lt;/ul>
&lt;h2 id="직관적-예시-알리바바-동굴">직관적 예시 알리바바 동굴&lt;/h2>
&lt;ul>
&lt;li>동굴의 두 갈래 A와 B 사이를 가로막는 문이 있고 비밀 주문을 알면 반대편으로 넘어올 수 있음&lt;/li>
&lt;li>검증자는 Prover가 들어간 뒤 무작위로 A 또는 B로 나오라고 요구함&lt;/li>
&lt;li>Prover가 주문을 모르면 자신이 들어간 쪽을 요구받을 때만 성공 가능. 1회 성공 확률 1/2&lt;/li>
&lt;li>k회 독립 반복하면 모두 속일 확률 2^-k로 급감&lt;/li>
&lt;li>검증자는 주문 내용은 모르지만 Prover가 주문을 안다는 사실만 높은 확률로 확신 가능함&lt;/li>
&lt;/ul>
&lt;p>핵심 포인트&lt;/p></description></item><item><title>블록체인 Reorg(체인 재구성) 이해</title><link>https://handsupmin.github.io/posts/blockchain-reorg-chain-reorganization-f4966a/</link><pubDate>Sun, 28 Sep 2025 13:05:58 +0000</pubDate><guid>https://handsupmin.github.io/posts/blockchain-reorg-chain-reorganization-f4966a/</guid><description>&lt;h2 id="개념과-배경">개념과 배경&lt;/h2>
&lt;p>Reorg는 동시에 생성된 블록로 체인이 잠시 분기된 뒤 합의 규칙에 따라 더 우세한 분기로 갈아타는 상황을 뜻함
짧아진 분기에 있던 블록은 활성 체인에서 제외되어 존재하지 않았던 것으로 취급됨
노드는 자신의 로컬 관점에서 더 우세한 체인을 발견하면 그 체인으로 교체하는데 이 현상은 네트워크 전체가 동시에 일어나는 게 아니라 각 노드에서 국소적으로 발생함&lt;/p>
&lt;h2 id="핵심-용어-정리">핵심 용어 정리&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>스테일 블록 best chain에 편입되지 못한 정상 블록을 말함&lt;/p>
&lt;/li>
&lt;li>
&lt;p>오펀 블록 전통적으로 부모를 모르는 블록을 의미하지만 커뮤니티에선 스테일 블록과 혼용되는 경우가 많음&lt;/p></description></item><item><title>블록체인 오라클 개념, 유형, 동작 원리</title><link>https://handsupmin.github.io/posts/blockchain-oracle-guide-91a3d2/</link><pubDate>Sat, 27 Sep 2025 13:05:51 +0000</pubDate><guid>https://handsupmin.github.io/posts/blockchain-oracle-guide-91a3d2/</guid><description>&lt;h2 id="개념과-배경">개념과 배경&lt;/h2>
&lt;p>스마트 컨트랙트는 체인 내부 상태만 신뢰하고 외부 네트워크에 직접 접근하지 않음
가격·날씨·게임 결과 같은 외부 데이터를 참조하려면 중간자 역할이 필요함
오라클은 외부 데이터를 온체인으로 들여오거나 온체인 이벤트를 외부 시스템에 전달하는 인터페이스 역할 수행
이 연결이 잘못 설계되면 컨트랙트의 무결성이 오라클 신뢰도에 종속되는 구조적 한계가 발생함&lt;/p>
&lt;h2 id="핵심-개념과-정의">핵심 개념과 정의&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>오라클&lt;/strong>: 블록체인과 외부 세계를 잇는 데이터 브리지 역할&lt;/li>
&lt;li>&lt;strong>인바운드 오라클&lt;/strong>: 외부 데이터를 온체인으로 주입&lt;/li>
&lt;li>&lt;strong>아웃바운드 오라클&lt;/strong>: 온체인 이벤트를 외부 서비스나 장치로 전달&lt;/li>
&lt;li>&lt;strong>중앙화 오라클&lt;/strong>: 단일 주체가 데이터 제공 단일 실패 지점과 조작 리스크 존재&lt;/li>
&lt;li>&lt;strong>탈중앙화 오라클&lt;/strong>: 다수 노드와 다중 소스 집계 신뢰성과 가용성 강화 대신 비용과 복잡도 상승&lt;/li>
&lt;li>&lt;strong>소프트웨어 오라클&lt;/strong>: API 기반 웹 데이터 공급&lt;/li>
&lt;li>&lt;strong>하드웨어 오라클&lt;/strong>: 센서·IoT 장치에서 물리 정보 수집과 증빙 제공&lt;/li>
&lt;li>&lt;strong>오라클 문제&lt;/strong>: 체인 합의는 내부 상태만 보장 외부 진실성은 합의 밖에 있어 신뢰 경계가 오라클로 이동하는 과제 존재&lt;/li>
&lt;/ul>
&lt;h2 id="동작-원리와-구조">동작 원리와 구조&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>요청 응답 패턴&lt;/strong>: 컨트랙트가 요청을 생성하고 오라클 네트워크가 수집·검증 후 결과를 콜백으로 전달&lt;/li>
&lt;li>&lt;strong>퍼블리시 패턴&lt;/strong>: 오라클이 주기적으로 데이터를 온체인에 게시하고 컨슈머는 읽기만 수행&lt;/li>
&lt;li>&lt;strong>집계 방식&lt;/strong>: 다중 소스 수집 후 중앙값 또는 가중 평균 산출 이상치 제거 규칙 포함&lt;/li>
&lt;li>&lt;strong>검증 기법&lt;/strong>: 서명 기반 인증, 임계치 다중서명, 커밋 리빌, 신뢰 실행 환경 원격 증명, TLS 증빙, 메르클 증명 등 선택지 존재&lt;/li>
&lt;li>&lt;strong>데이터 신선도&lt;/strong>: 하트비트 주기, 변경 폭 임계치 기반 갱신 트리거, 최대 지연 한도 설정&lt;/li>
&lt;li>&lt;strong>전달 보안&lt;/strong>: 콜백 함수 화이트리스트와 접근 제어 논스·타임스탬프로 리플레이 방지&lt;/li>
&lt;li>&lt;strong>비용 모델&lt;/strong>: 온체인 저장과 콜백은 가스 비용 증가 업데이트 주기와 보안 강도를 목적에 맞춰 절충 필요&lt;/li>
&lt;/ul>
&lt;h2 id="위협-모델과-취약점">위협 모델과 취약점&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>데이터 원천 조작&lt;/strong>: 저유동성 구간이나 플래시론을 이용한 가격 왜곡&lt;/li>
&lt;li>&lt;strong>MEV와 타이밍&lt;/strong>: 블록 포함 순서와 재구성에 따른 관측 시점 왜곡&lt;/li>
&lt;li>&lt;strong>블록 타임 오용&lt;/strong>: block.timestamp는 제한적 조작 허용 범위가 있어 현실 시간 대체로 부적합&lt;/li>
&lt;li>&lt;strong>릴레이 재생&lt;/strong>: 과거 응답 재사용 시도 논스·체인ID·세션 바인딩으로 차단 필요&lt;/li>
&lt;li>&lt;strong>키 관리&lt;/strong>: 운영 키 탈취 시 악성 업데이트 가능 임계치 서명과 HSM 사용 권장&lt;/li>
&lt;li>&lt;strong>TEE 한계&lt;/strong>: 측채널과 신규 취약점 가능성 원격 증빙 검증과 이중화 필요&lt;/li>
&lt;li>&lt;strong>브리지 혼동&lt;/strong>: 교차체인 메시징은 오라클과 유사하나 보안 가정과 합의 상속 방식이 다름 경계 구분 필요&lt;/li>
&lt;/ul>
&lt;h2 id="설계-패턴">설계 패턴&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>푸시형 가격 피드&lt;/strong>: 오라클이 주기적으로 포스트 컨슈머는 최신값을 읽고 신선도 검사&lt;/li>
&lt;li>&lt;strong>풀형 요청 응답&lt;/strong>: 컨슈머가 자산·시장·윈도우를 명시해 요청 생성 오라클이 비동기로 응답&lt;/li>
&lt;li>&lt;strong>낙관적 오라클&lt;/strong>: 먼저 값을 게시하고 이의 제기 윈도우 동안 분쟁 없으면 확정 파생상품과 거버넌스 판정에 유용&lt;/li>
&lt;li>&lt;strong>라이트클라이언트 기반&lt;/strong>: 다른 체인의 상태를 검증 가능한 증명으로 반영 신뢰를 오라클에서 원체인 합의로 이동시키는 접근&lt;/li>
&lt;/ul>
&lt;h2 id="간단-예시">간단 예시&lt;/h2>
&lt;p>가격 피드를 읽고 오래된 값은 거부하는 최소 구현 예시&lt;/p></description></item><item><title>OpenZeppelin Contracts 5.0 마이그레이션 가이드 — ERC20·ERC721·ERC1155 _update 전환과 ERC777 제거</title><link>https://handsupmin.github.io/posts/openzeppelin-contracts-5-migration-erc20-erc721-erc1155-update-erc777-removal-73e149/</link><pubDate>Fri, 26 Sep 2025 13:08:50 +0000</pubDate><guid>https://handsupmin.github.io/posts/openzeppelin-contracts-5-migration-erc20-erc721-erc1155-update-erc777-removal-73e149/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>OpenZeppelin Contracts 5.0으로 올라가면서 토큰 표준 구현 방식이 크게 바뀜
핵심은 ERC20·ERC721·ERC1155에서 _beforeTokenTransfer와 _afterTokenTransfer 훅이 제거되고 내부 상태 갱신 진입점이 _update 하나로 통합된 것
또한 ERC777과 ERC1820Implementer가 제거됨
이 글은 4.6 계열에서 5.1까지 마이그레이션할 때 알아야 할 변경점과 안전한 이전 절차를 정리함&lt;/p>
&lt;h3 id="핵심-변경-사항">핵심 변경 사항&lt;/h3>
&lt;ul>
&lt;li>ERC20·ERC721·ERC1155의 전송 수명주기 훅 제거 및 _update 도입
&lt;ul>
&lt;li>기존 훅 기반 커스터마이징은 _update 오버라이드로 이전 필요&lt;/li>
&lt;li>민트와 번 포함 모든 잔액 변경 경로가 _update로 수렴&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>_transfer, _mint, _burn 비가상 처리
&lt;ul>
&lt;li>더 이상 이 함수들을 직접 오버라이드 불가&lt;/li>
&lt;li>일관성 보장을 위해 상태 변경 경로를 고정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ERC777 및 ERC1820Implementer 제거
&lt;ul>
&lt;li>4.9에서 폐기 예고되었고 5.0에서 실제 삭제&lt;/li>
&lt;li>해당 표준 인터페이스는 별도 레포에서 유지되나 구현체 제공하지 않음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="동작-원리와-의도">동작 원리와 의도&lt;/h3>
&lt;ul>
&lt;li>단일 진입점 설계
&lt;ul>
&lt;li>모든 잔액 및 공급 변화가 _update에서 처리됨&lt;/li>
&lt;li>확장과 커스터마이징은 _update를 단일 오버라이드 포인트로 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>불변식 강화
&lt;ul>
&lt;li>_transfer, _mint, _burn을 잠그고 내부 루팅으로만 호출되게 하여 상태 불일치 리스크 감소&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>확장 간 상호작용 일관화
&lt;ul>
&lt;li>투표, 스냅샷, 소각 수수료, 중지 등 다양한 확장을 _update 체인으로 연결&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="마이그레이션-가이드">마이그레이션 가이드&lt;/h3>
&lt;ol>
&lt;li>훅 사용 여부 점검&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>_beforeTokenTransfer, _afterTokenTransfer 오버라이드 코드 존재 여부 확인&lt;/li>
&lt;li>각 훅에서 하던 검증, 제한, 회계 처리 항목을 목록화&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>_update 오버라이드로 이전&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>훅에 있던 로직을 _update에 통합&lt;/li>
&lt;li>검증은 상태 갱신 전 수행 권장&lt;/li>
&lt;li>필수로 super._update 호출 필요&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>기존 _transfer, _mint, _burn 오버라이드 삭제&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>5.0에서는 오버라이드 자체가 불가&lt;/li>
&lt;li>커스터마이징은 _update 단일 경로로 정리&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>민트와 번 경계값 처리 확인&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>from 또는 to가 address(0)인 경우를 민트와 번으로 해석&lt;/li>
&lt;li>수수료, 제한, 공급 상한과 같은 정책에서 제로 주소 여부 분기 필요&lt;/li>
&lt;/ul>
&lt;ol start="5">
&lt;li>테스트와 이벤트 검증 강화&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Transfer 이벤트는 여전히 발생하므로 기존 테스트 자산 가능&lt;/li>
&lt;li>단, 커스터마이징이 이벤트 순서나 재진입 가능성에 영향 주지 않게 확인&lt;/li>
&lt;/ul>
&lt;h3 id="최소-예시">최소 예시&lt;/h3>
&lt;p>아래는 기존 _beforeTokenTransfer에서 하던 검증을 _update로 옮기는 형태의 최소 패턴 예시&lt;/p></description></item><item><title>Off-chain 개념과 데이터 가용성: zkRollup vs Validium 비교</title><link>https://handsupmin.github.io/posts/off-chain-data-availability-zkrollup-validium-274b74/</link><pubDate>Thu, 25 Sep 2025 13:10:01 +0000</pubDate><guid>https://handsupmin.github.io/posts/off-chain-data-availability-zkrollup-validium-274b74/</guid><description>&lt;h3 id="개념-및-배경">개념 및 배경&lt;/h3>
&lt;p>Off‑chain은 블록체인 &lt;strong>외부&lt;/strong>에서 연산·저장을 수행하고 &lt;strong>필요한 증명 또는 요약만 온체인에 게시&lt;/strong>하는 접근을 말함
목표는 &lt;strong>가스비 절감&lt;/strong>, &lt;strong>처리량 확대&lt;/strong>, &lt;strong>데이터 활용 유연성 확보&lt;/strong>임
온체인은 합의와 정산의 최소 핵심만 유지하고, 나머지는 오프체인 시스템으로 이전하는 설계 철학임&lt;/p>
&lt;hr>
&lt;h3 id="핵심-개념과-정의">핵심 개념과 정의&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Off‑chain 처리&lt;/strong>
트랜잭션 집계·상태 채널 업데이트·인덱싱·분석 등을 체인 밖에서 수행하고 결과 요약만 온체인에 커밋하는 방식임&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Off‑chain Data Availability DA&lt;/strong>
트랜잭션 본문은 오프체인에 보관하고 온체인에는 검증용 최소 데이터와 &lt;strong>유효성 또는 사기 증명&lt;/strong>만 올리는 모델임
데이터 보관자나 분산 스토리지의 &lt;strong>지속 제공&lt;/strong>을 신뢰하거나 경제적 인센티브로 강제하는 설계가 필요함&lt;/p></description></item><item><title>Abstract 체인이란? zkRollup 기반 L2 체인 구조와 핵심 컴포넌트 정리</title><link>https://handsupmin.github.io/posts/abstract-chain-overview-274b74/</link><pubDate>Wed, 24 Sep 2025 13:09:24 +0000</pubDate><guid>https://handsupmin.github.io/posts/abstract-chain-overview-274b74/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>이 글은 ‘Abstract’로 지칭되는 &lt;strong>ZK Rollup 기반 L2 체인&lt;/strong>의 구조와 핵심 컴포넌트를 &lt;strong>실무 관점&lt;/strong>에서 정리함
목표는 &lt;strong>트랜잭션 흐름&lt;/strong>, &lt;strong>증명 생성·검증 파이프라인&lt;/strong>, &lt;strong>데이터 가용성(DA)&lt;/strong>, &lt;strong>네이티브 계정 추상화(AA)&lt;/strong>, &lt;strong>스마트 컨트랙트 지갑&lt;/strong>의 동작 방식과 &lt;strong>운영·보안·성능 관점의 실무 포인트&lt;/strong>를 초보자도 이해할 수 있게 설명하면서, 전문가가 보아도 무리가 없도록 &lt;strong>정확성&lt;/strong>을 보강하는 것&lt;/p>
&lt;blockquote>
&lt;p>주의: 본 문서는 &lt;strong>일반적인 ZK Rollup 아키텍처&lt;/strong>를 기준으로 설명함. 체인/스택별 명칭과 세부 동작(예: 함수명, 회로 구성, 수수료 정책)은 다를 수 있으므로 &lt;strong>구현체 문서&lt;/strong>를 병행 참고 필요&lt;/p></description></item><item><title>커스토디얼 vs 논커스토디얼 월렛 비교</title><link>https://handsupmin.github.io/posts/custodial-vs-noncustodial-wallets-274b74/</link><pubDate>Tue, 23 Sep 2025 13:09:26 +0000</pubDate><guid>https://handsupmin.github.io/posts/custodial-vs-noncustodial-wallets-274b74/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>프라이빗키 관리 방식에 따라 암호화폐 월렛은 &lt;strong>커스토디얼(custodial)&lt;/strong> 과 &lt;strong>논커스토디얼(noncustodial)&lt;/strong> 로 구분됨
각 방식의 차이와 선택 기준, 보안·운영 리스크와 대응 방안을 &lt;strong>초보자도 이해할 수 있게&lt;/strong> 정리하면서 &lt;strong>실무자가 바로 적용할 수 있는 체크리스트&lt;/strong>까지 제시함&lt;/p>
&lt;hr>
&lt;h3 id="핵심-개념">핵심 개념&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>커스토디얼 월렛&lt;/strong>
제3자 서비스가 사용자의 프라이빗키를 보관하고 서명을 대행하는 구조
로그인·출금 등은 서비스 인증 절차를 거쳐 처리됨&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>논커스토디얼 월렛&lt;/strong>
사용자가 프라이빗키를 직접 보유·관리하는 구조
브라우저 확장 지갑·모바일 앱 지갑·하드웨어 지갑이 대표적 사례임&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>핵심 차이 한 줄 정리&lt;/strong>
키의 &lt;strong>소유·통제 주체&lt;/strong>가 제3자인가 사용자 본인인가의 차이&lt;/p></description></item><item><title>블록체인이란? 블록체인 개념 총정리</title><link>https://handsupmin.github.io/posts/blockchain-principles-mining-hash-274b74/</link><pubDate>Mon, 22 Sep 2025 13:10:11 +0000</pubDate><guid>https://handsupmin.github.io/posts/blockchain-principles-mining-hash-274b74/</guid><description>&lt;h2 id="개요">개요&lt;/h2>
&lt;p>블록체인은 &lt;strong>중앙 기관 없이&lt;/strong> 참여자들이 거래를 기록·검증·공유하는 &lt;strong>분산 원장&lt;/strong> 기술임
이 글은 블록체인을 &lt;strong>초보자 친화적으로&lt;/strong> 설명하고, &lt;strong>실무 체크리스트&lt;/strong>까지 정리함&lt;/p>
&lt;hr>
&lt;h2 id="큰-그림-시스템-구성">큰 그림: 시스템 구성&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>노드(Node)&lt;/strong>: 블록체인 소프트웨어 실행 주체&lt;/p>
&lt;ul>
&lt;li>&lt;strong>풀노드&lt;/strong>: 모든 블록·트랜잭션 검증·저장&lt;/li>
&lt;li>&lt;strong>라이트 클라이언트&lt;/strong>: 헤더·머클 증명 기반 최소 검증&lt;/li>
&lt;li>(참고) &lt;strong>아카이브 노드&lt;/strong>: 오래된 상태 포함 전체 상태 유지(필수 아님)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>블록(Block)&lt;/strong>: 트랜잭션 묶음 + 메타데이터(블록헤더). 블록들이 선형 체인으로 연결됨&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>합의(Consensus)&lt;/strong>: 어떤 블록이 정식 이력인지 네트워크가 &lt;strong>공동으로&lt;/strong> 결정하는 규칙&lt;/p>
&lt;ul>
&lt;li>PoW: 작업증명(연산 경쟁)&lt;/li>
&lt;li>PoS: 지분증명(검증자·보증금 기반)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="해시hash와-위변조-방지">해시(Hash)와 위·변조 방지&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>해시 함수(SHA-256, Keccak-256 등)&lt;/strong>: 입력을 고정 길이로 압축하는 일방향 함수임&lt;/p></description></item><item><title>스마트 컨트랙트에서 O(n)을 피하고 O(1)을 지향해야 하는 이유와 실무 대처법</title><link>https://handsupmin.github.io/posts/why-avoid-o-n-in-smart-contracts-aim-for-o1-274b74/</link><pubDate>Sun, 21 Sep 2025 13:05:50 +0000</pubDate><guid>https://handsupmin.github.io/posts/why-avoid-o-n-in-smart-contracts-aim-for-o1-274b74/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>스마트 컨트랙트에서 무제한에 가까운 O(n) 반복문은 성능 저하를 넘어 &lt;strong>실행 불가&lt;/strong>로 이어질 수 있음
블록당 가스 한도와 트랜잭션 가스 모델 때문에 선형 탐색이나 전수 루프는 특정 규모에서 &lt;strong>가스 한도 초과&lt;/strong>를 일으켜 서비스 가용성을 떨어뜨림
이 문서는 원인과 개선 패턴, 실무 체크리스트를 정리함&lt;/p>
&lt;hr>
&lt;h3 id="문제-정의와-영향">문제 정의와 영향&lt;/h3>
&lt;ul>
&lt;li>배열 전수 탐색으로 중복 검사나 상태 검증을 수행하는 구현이 흔함
예 users 배열을 처음부터 끝까지 훑어 가입자 중복을 확인하는 방식&lt;/li>
&lt;li>가입자 수에 비례해 가스가 선형 증가하며 어느 시점부터 한 트랜잭션으로 처리 불가&lt;/li>
&lt;li>공격자가 &lt;strong>가스 그리핑&lt;/strong>을 유도하거나 외부 입력으로 루프 길이를 키우면 사실상 &lt;strong>DoS&lt;/strong>가 될 수 있음&lt;/li>
&lt;li>RPC 에러 메시지는 노드별로 다르지만 본질은 가스 예산 초과로 인한 &lt;strong>미포함·리버트&lt;/strong>임&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="핵심-개념과-대안">핵심 개념과 대안&lt;/h3>
&lt;p>&lt;strong>1) 매핑으로 존재 여부 O(1) 검사&lt;/strong>
저장 키 기반 조회가 상수 시간으로 동작해 선형 탐색을 제거함&lt;/p></description></item><item><title>오프체인 서명 검증(Off-chain Signature Verification)이란?</title><link>https://handsupmin.github.io/posts/off-chain-signature-verification-542a33/</link><pubDate>Sun, 21 Sep 2025 03:11:23 +0000</pubDate><guid>https://handsupmin.github.io/posts/off-chain-signature-verification-542a33/</guid><description>&lt;h2 id="개요">개요&lt;/h2>
&lt;p>블록체인 기술에서 모든 것을 온체인(On-chain)으로 처리하는 것은 비효율적이거나 불가능한 경우가 많음
이때 &lt;strong>오프체인 서명 검증&lt;/strong>(Off-chain Signature Verification)은 오프체인(서버)의 유연성과 온체인(컨트랙트)의 신뢰성을 결합하는 강력한 해결책이 됨&lt;/p>
&lt;p>쉽게 비유하자면, 클럽 매니저(서버)가 VIP 손님(사용자)에게만 특별한 싸인이 담긴 입장권(서명)을 발급하고, 입구의 가드(스마트 컨트랙트)는 그 싸인만 확인하고 들여보내는 것과 같음
가드는 매번 매니저에게 연락할 필요 없이, 위조되지 않은 싸인인지 확인만 하면 됨&lt;/p>
&lt;p>이 글에서는 오프체인 서명 검증이 무엇인지, 어떤 용어들이 사용되는지, 그리고 가장 중요하게는 어떤 원리로 동작하는지 상세히 알아봄&lt;/p></description></item><item><title>재귀적 영지식 증명이란? (Recursion ZKP)</title><link>https://handsupmin.github.io/posts/recursion-zkp-basics-274b74/</link><pubDate>Sun, 21 Sep 2025 02:33:25 +0000</pubDate><guid>https://handsupmin.github.io/posts/recursion-zkp-basics-274b74/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>재귀적 영지식 증명 Recursion ZKP 은 여러 개의 ZK 증명을 &lt;strong>계층적으로 합성&lt;/strong>해 &lt;strong>단일 증명&lt;/strong>으로 만드는 기법임
목적은 온체인 검증 횟수와 가스를 줄이고, L2 등에서 생성한 다수 증명을 하나로 압축해 &lt;strong>검증 비용을 상수 수준으로 수렴&lt;/strong>시키는 데 있음&lt;/p>
&lt;hr>
&lt;h3 id="왜-필요한가">왜 필요한가&lt;/h3>
&lt;ul>
&lt;li>트랜잭션 단위로 개별 증명을 온체인 검증하면 &lt;strong>검증 비용이 선형 증가&lt;/strong>함&lt;/li>
&lt;li>재귀를 쓰면 n개의 증명을 &lt;strong>트리 형태로 합성&lt;/strong>해 &lt;strong>한 번의 최종 검증&lt;/strong>으로 대체 가능함&lt;/li>
&lt;li>롤업·배치 처리·프라이버시 워크로드에서 &lt;strong>확장성&lt;/strong>과 &lt;strong>최종성 지연 단축&lt;/strong>을 동시에 노림&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="핵심-개념">핵심 개념&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>내부 증명 Inner proofs&lt;/strong>
원래 명제 트랜잭션, 상태 전이, 정책 검증 등에 대한 개별 ZK 증명 집합&lt;/p></description></item><item><title>안전한 가스비 대납을 위한 오프체인 서명 검증 페이마스터 (in ZkSync Era)</title><link>https://handsupmin.github.io/posts/zksync-era-paymaster-off-chain-signature-verification-274b74/</link><pubDate>Sun, 21 Sep 2025 02:14:08 +0000</pubDate><guid>https://handsupmin.github.io/posts/zksync-era-paymaster-off-chain-signature-verification-274b74/</guid><description>&lt;h2 id="개요">개요&lt;/h2>
&lt;p>블록체인 서비스에서 사용자가 겪는 가장 큰 장벽 중 하나는 단연 &lt;strong>가스비&lt;/strong>(Gas Fee)임
아무리 좋은 서비스를 만들어도, 사용자가 지갑에 가스비로 쓸 코인(ETH 등)을 보유하고 있어야 한다는 점은 대중화를 가로막는 결정적인 요인임
이 문제를 해결해 사용자가 가스비 걱정 없이 서비스 핵심 가치에만 집중하게 만드는 것, 즉 &lt;strong>가스리스 트랜잭션&lt;/strong>(Gasless Transaction)을 구현하는 것이 이번 개발의 최종 목표였음&lt;/p>
&lt;p>zkSync Era는 이를 위해 &lt;strong>페이마스터&lt;/strong>(Paymaster)라는 강력한 시스템을 제공함. 페이마스터는 서비스 제공자 같은 제3자가 사용자를 대신해 트랜잭션 수수료를 지불할 수 있게 해주는 스마트 컨트랙트임&lt;/p></description></item><item><title>머클트리(Merkle Tree)란? 머클트리의 개념과 블록체인에서의 역할</title><link>https://handsupmin.github.io/posts/merkle-tree-blockchain-role-274b74/</link><pubDate>Sat, 20 Sep 2025 17:15:26 +0000</pubDate><guid>https://handsupmin.github.io/posts/merkle-tree-blockchain-role-274b74/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>머클트리는 블록체인에서 거래 집합을 &lt;strong>안전하고 효율적으로 요약·검증&lt;/strong>하기 위해 쓰이는 핵심 자료구조임
블록 헤더에 머클루트가 포함되는 이유는 블록 안의 모든 거래를 &lt;strong>고정 크기 해시 하나&lt;/strong>로 대표해 무결성 확인과 경량 검증을 가능하게 하기 때문임
이 글은 머클트리의 구조와 동작 원리, 블록체인에서의 실무적 의미와 구현 주의사항까지 초보자도 이해할 수 있도록 상세히 설명함&lt;/p>
&lt;hr>
&lt;h3 id="핵심-개념과-구조">핵심 개념과 구조&lt;/h3>
&lt;ul>
&lt;li>머클트리는 보통 &lt;strong>이진 트리&lt;/strong> 형태로 구현함&lt;/li>
&lt;li>거래들을 &lt;strong>리프(leaf)&lt;/strong> 로 두고 인접 두 리프의 해시를 이어 붙여 부모 해시를 만들며 이 과정을 반복해 &lt;strong>루트 해시&lt;/strong>를 얻음&lt;/li>
&lt;li>해시 함수는 체인별로 다르며 비트코인은 &lt;strong>더블 SHA‑256&lt;/strong>, 이더리움은 트라이 구조에서 &lt;strong>Keccak‑256&lt;/strong> 을 사용함&lt;/li>
&lt;li>최상단 해시를 &lt;strong>머클루트(Merkle root)&lt;/strong> 라 부르며 크기는 해시 함수에 따라 고정됨&lt;/li>
&lt;li>리프 수가 홀수일 때는 마지막 리프를 &lt;strong>복제해 짝을 맞추는 방식&lt;/strong>이 일반적이며 비트코인은 이 규칙을 사용함&lt;/li>
&lt;li>트리 깊이는 리프 수 N에 대해 &lt;strong>⌈log₂ N⌉&lt;/strong> 에 비례하므로 대량의 거래를 효율적으로 요약할 수 있음&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="동작-원리와-장점">동작 원리와 장점&lt;/h3>
&lt;ul>
&lt;li>인접 노드 해시 &lt;strong>H_left || H_right&lt;/strong> 를 순서대로 연결해 해시를 계산하고 이를 위로 올려가며 루트 해시를 얻음&lt;/li>
&lt;li>&lt;strong>무결성 검증&lt;/strong>
단일 거래가 바뀌면 해당 리프에서 루트까지의 모든 경로 해시가 바뀌어 변조를 즉시 탐지할 수 있음&lt;/li>
&lt;li>&lt;strong>효율적 포함 증명&lt;/strong>
특정 거래가 블록에 포함되었음을 증명하려면 그 거래와 경로상의 &lt;strong>형제 해시들만&lt;/strong> 있으면 됨
필요한 해시 개수는 &lt;strong>O(log N)&lt;/strong> 으로 작아 대역폭과 검증 비용이 작음&lt;/li>
&lt;li>&lt;strong>확장성 보조&lt;/strong>
리프가 1,000,000개여도 증명에 필요한 형제 해시는 약 20개 수준으로 32바이트 해시 기준 약 640바이트에 불과함&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="블록-헤더와-경량-노드spv">블록 헤더와 경량 노드(SPV)&lt;/h3>
&lt;ul>
&lt;li>비트코인 블록 헤더는 이전 블록 해시, 머클루트, 난스 등 합의 관련 메타데이터를 포함함&lt;/li>
&lt;li>경량 노드(SPV)는 &lt;strong>블록 전체가 아니라 헤더 체인만&lt;/strong> 받아 신뢰성을 확보하고, 개별 거래에 대해서는 풀노드로부터 &lt;strong>머클 증명&lt;/strong> 을 받아 포함 여부를 검증함&lt;/li>
&lt;li>이 방식은 모바일·임베디드 환경에서도 실사용이 가능하게 하는 기반이 됨&lt;/li>
&lt;li>이더리움은 전통적인 이진 머클트리 대신 &lt;strong>머클‑패트리샤 트라이(MPT)&lt;/strong> 를 사용해 거래·영수증·상태 루트를 헤더에 담아 유사한 목적을 달성함&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="구현-세부와-체인별-차이">구현 세부와 체인별 차이&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>비트코인&lt;/strong>&lt;/p></description></item><item><title>이더리움 PoS(Proof of Stake) 소개</title><link>https://handsupmin.github.io/posts/ethereum-pos-proof-of-stake-274b74/</link><pubDate>Sat, 20 Sep 2025 17:04:48 +0000</pubDate><guid>https://handsupmin.github.io/posts/ethereum-pos-proof-of-stake-274b74/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>이 문서는 이더리움의 PoS 합의 구조와 구성 요소를 정리함
개념 정의에 그치지 않고 &lt;strong>운영 시 주의점&lt;/strong>, &lt;strong>보상·출금 흐름&lt;/strong>, &lt;strong>짧은 체인 재구성(Reorg) 원인과 완화책&lt;/strong>까지 다룸&lt;/p>
&lt;hr>
&lt;h3 id="개념과-배경">개념과 배경&lt;/h3>
&lt;p>PoS는 PoW의 에너지 경쟁을 대체해 &lt;strong>예치된 지분을 바탕으로 검증자를 선정&lt;/strong>하는 합의 메커니즘임
이더리움은 2022년 9월 더 머지 이후 PoS로 전환했고 전력 소비를 크게 줄이며 &lt;strong>검증자 기반 보안 모델&lt;/strong>로 이행함&lt;/p>
&lt;p>주요 속성 요약&lt;/p>
&lt;ul>
&lt;li>에너지 소비 대폭 축소&lt;/li>
&lt;li>스테이킹한 ETH 규모에 비례해 역할 참여 기회가 부여됨&lt;/li>
&lt;li>위반 시 슬래싱과 페널티로 예치금이 감소함&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="계층-분리와-beacon-chain의-역할">계층 분리와 Beacon Chain의 역할&lt;/h3>
&lt;p>이더리움은 &lt;strong>합의 계층(Beacon Chain)&lt;/strong> 과 &lt;strong>실행 계층(Execution Layer)&lt;/strong> 를 분리해 설계함&lt;/p></description></item><item><title>NFT 핵심 용어 정리</title><link>https://handsupmin.github.io/posts/nft-23q12akw/</link><pubDate>Sat, 20 Sep 2025 16:56:17 +0000</pubDate><guid>https://handsupmin.github.io/posts/nft-23q12akw/</guid><description>&lt;h3 id="개요">개요&lt;/h3>
&lt;p>NFT 커뮤니티 초입에서 마주치는 용어 장벽을 낮추기 위해 &lt;strong>리빌&lt;/strong>, &lt;strong>에어드롭&lt;/strong>, &lt;strong>화이트리스트&lt;/strong>, &lt;strong>마켓플레이스&lt;/strong>를 실무 관점으로 정리함
핵심은 개념 이해를 넘어 &lt;strong>운영 체크리스트&lt;/strong>, &lt;strong>보안 리스크&lt;/strong>, &lt;strong>가격 형성 메커니즘&lt;/strong>까지 파악해 프로젝트 참여와 거래 판단에 바로 쓰도록 하는 것임&lt;/p>
&lt;hr>
&lt;h2 id="공통-전제와-기본-개념">공통 전제와 기본 개념&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>NFT 표준&lt;/strong>
주로 ERC‑721과 ERC‑1155를 사용함
721은 1토큰 1소유 형태에 적합, 1155는 대량 발행·세미펀지블에 유리함&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>메타데이터와 저장소&lt;/strong>
토큰 URI가 가리키는 메타데이터는 IPFS나 Arweave 등 영속 스토리지 사용 권장
중앙화 서버만 쓰면 리빌 이후 임의 변경 리스크가 커짐&lt;/p></description></item><item><title>NFT란? NFT 핵심 개념 정리</title><link>https://handsupmin.github.io/posts/nft-concept-20gd0fl/</link><pubDate>Sat, 20 Sep 2025 16:41:07 +0000</pubDate><guid>https://handsupmin.github.io/posts/nft-concept-20gd0fl/</guid><description>&lt;h3 id="서문">서문&lt;/h3>
&lt;p>NFT는 몇 년 새 대중의 관심을 받았지만 개념과 절차가 분산돼 있어 입문자가 막히기 쉬움
이 글은 &lt;strong>실무자 관점&lt;/strong>에서 NFT의 핵심 개념을 단계적으로 정리하고 &lt;strong>구매·발행·보관 시 유의사항&lt;/strong>과 &lt;strong>운영 관행&lt;/strong>을 담는 것을 목표로 함&lt;/p>
&lt;hr>
&lt;h3 id="개념과-배경">개념과 배경&lt;/h3>
&lt;p>NFT는 Non‑Fungible Token의 약자이며 대체 불가능한 토큰을 의미함
동일 단위끼리 교환 가능한 자산은 펀저블 토큰이라 부르고 NFT는 각 토큰이 &lt;strong>고유 식별자와 속성&lt;/strong>을 가져 상호 교환 시 동일 가치를 보장하지 않음
블록체인에 기록된 소유권은 변경이 어렵고 거래 이력이 투명하게 남는다는 장점이 있음
온체인 소유권이 &lt;strong>저작권·초상권 등 법적 권리와 자동 동치가 아님&lt;/strong>에 유의해야 함&lt;/p></description></item><item><title>pnpm이란? pnpm의 개념과 사용방법 총정리</title><link>https://handsupmin.github.io/posts/pnpm-92fmw2/</link><pubDate>Wed, 17 Sep 2025 16:44:51 +0000</pubDate><guid>https://handsupmin.github.io/posts/pnpm-92fmw2/</guid><description>&lt;h3 id="서문">서문&lt;/h3>
&lt;p>pnpm은 npm과 유사한 CLI를 제공하면서 &lt;strong>의존성 저장 구조&lt;/strong>를 혁신해 디스크 중복을 줄이고 설치 성능을 높인 패키지 매니저임
대규모 모노레포와 여러 프로젝트를 동시에 운영할 때 &lt;strong>중복 패키지 최소화·설치 속도 개선·일관된 잠금 파일 관리&lt;/strong>를 목표로 함
이 글은 pnpm의 &lt;strong>설치 동작 원리&lt;/strong>와 &lt;strong>워크스페이스 활용법&lt;/strong>을 실무 관점에서 정리함&lt;/p>
&lt;hr>
&lt;h3 id="개념-및-배경">개념 및 배경&lt;/h3>
&lt;p>핵심 아이디어는 &lt;strong>사용자 단위의 콘텐츠 주소 기반 저장소(Content‑Addressable Store)&lt;/strong> 와 &lt;strong>하드링크 + 심볼릭 링크&lt;/strong> 조합임&lt;/p>
&lt;ul>
&lt;li>패키지 실제 파일은 사용자 스토어에 &lt;strong>한 번만&lt;/strong> 저장됨&lt;/li>
&lt;li>각 프로젝트의 &lt;code>node_modules&lt;/code>에는 스토어의 파일을 &lt;strong>하드링크&lt;/strong>로 연결하고, 패키지 간 의존 관계는 &lt;strong>심볼릭 링크&lt;/strong>로 구성함&lt;/li>
&lt;li>결과적으로 동일 버전 패키지가 여러 프로젝트에서 필요해도 물리 복제가 발생하지 않음&lt;/li>
&lt;/ul>
&lt;p>스토어 기본 위치는 OS와 설정에 따라 달라지므로 명령으로 확인하는 것이 정확함&lt;/p></description></item></channel></rss>